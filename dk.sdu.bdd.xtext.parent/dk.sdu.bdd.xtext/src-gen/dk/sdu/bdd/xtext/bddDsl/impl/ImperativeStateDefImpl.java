/**
 * generated by Xtext 2.32.0
 */
package dk.sdu.bdd.xtext.bddDsl.impl;

import dk.sdu.bdd.xtext.bddDsl.BddDslPackage;
import dk.sdu.bdd.xtext.bddDsl.ImperativeStateDef;
import dk.sdu.bdd.xtext.bddDsl.ImperativeStateName;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Imperative State Def</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.sdu.bdd.xtext.bddDsl.impl.ImperativeStateDefImpl#getPostive <em>Postive</em>}</li>
 *   <li>{@link dk.sdu.bdd.xtext.bddDsl.impl.ImperativeStateDefImpl#getNegative <em>Negative</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ImperativeStateDefImpl extends MinimalEObjectImpl.Container implements ImperativeStateDef
{
  /**
   * The cached value of the '{@link #getPostive() <em>Postive</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPostive()
   * @generated
   * @ordered
   */
  protected ImperativeStateName postive;

  /**
   * The cached value of the '{@link #getNegative() <em>Negative</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNegative()
   * @generated
   * @ordered
   */
  protected ImperativeStateName negative;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImperativeStateDefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BddDslPackage.Literals.IMPERATIVE_STATE_DEF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImperativeStateName getPostive()
  {
    return postive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPostive(ImperativeStateName newPostive, NotificationChain msgs)
  {
    ImperativeStateName oldPostive = postive;
    postive = newPostive;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BddDslPackage.IMPERATIVE_STATE_DEF__POSTIVE, oldPostive, newPostive);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPostive(ImperativeStateName newPostive)
  {
    if (newPostive != postive)
    {
      NotificationChain msgs = null;
      if (postive != null)
        msgs = ((InternalEObject)postive).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BddDslPackage.IMPERATIVE_STATE_DEF__POSTIVE, null, msgs);
      if (newPostive != null)
        msgs = ((InternalEObject)newPostive).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BddDslPackage.IMPERATIVE_STATE_DEF__POSTIVE, null, msgs);
      msgs = basicSetPostive(newPostive, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BddDslPackage.IMPERATIVE_STATE_DEF__POSTIVE, newPostive, newPostive));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImperativeStateName getNegative()
  {
    return negative;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNegative(ImperativeStateName newNegative, NotificationChain msgs)
  {
    ImperativeStateName oldNegative = negative;
    negative = newNegative;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BddDslPackage.IMPERATIVE_STATE_DEF__NEGATIVE, oldNegative, newNegative);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNegative(ImperativeStateName newNegative)
  {
    if (newNegative != negative)
    {
      NotificationChain msgs = null;
      if (negative != null)
        msgs = ((InternalEObject)negative).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BddDslPackage.IMPERATIVE_STATE_DEF__NEGATIVE, null, msgs);
      if (newNegative != null)
        msgs = ((InternalEObject)newNegative).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BddDslPackage.IMPERATIVE_STATE_DEF__NEGATIVE, null, msgs);
      msgs = basicSetNegative(newNegative, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BddDslPackage.IMPERATIVE_STATE_DEF__NEGATIVE, newNegative, newNegative));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BddDslPackage.IMPERATIVE_STATE_DEF__POSTIVE:
        return basicSetPostive(null, msgs);
      case BddDslPackage.IMPERATIVE_STATE_DEF__NEGATIVE:
        return basicSetNegative(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BddDslPackage.IMPERATIVE_STATE_DEF__POSTIVE:
        return getPostive();
      case BddDslPackage.IMPERATIVE_STATE_DEF__NEGATIVE:
        return getNegative();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BddDslPackage.IMPERATIVE_STATE_DEF__POSTIVE:
        setPostive((ImperativeStateName)newValue);
        return;
      case BddDslPackage.IMPERATIVE_STATE_DEF__NEGATIVE:
        setNegative((ImperativeStateName)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BddDslPackage.IMPERATIVE_STATE_DEF__POSTIVE:
        setPostive((ImperativeStateName)null);
        return;
      case BddDslPackage.IMPERATIVE_STATE_DEF__NEGATIVE:
        setNegative((ImperativeStateName)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BddDslPackage.IMPERATIVE_STATE_DEF__POSTIVE:
        return postive != null;
      case BddDslPackage.IMPERATIVE_STATE_DEF__NEGATIVE:
        return negative != null;
    }
    return super.eIsSet(featureID);
  }

} //ImperativeStateDefImpl
