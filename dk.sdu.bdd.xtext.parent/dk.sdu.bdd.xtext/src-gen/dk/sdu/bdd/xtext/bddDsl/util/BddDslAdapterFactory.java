/**
 * generated by Xtext 2.32.0
 */
package dk.sdu.bdd.xtext.bddDsl.util;

import dk.sdu.bdd.xtext.bddDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see dk.sdu.bdd.xtext.bddDsl.BddDslPackage
 * @generated
 */
public class BddDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static BddDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BddDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = BddDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BddDslSwitch<Adapter> modelSwitch =
    new BddDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseModelRef(ModelRef object)
      {
        return createModelRefAdapter();
      }
      @Override
      public Adapter caseDeclarativeEntityDef(DeclarativeEntityDef object)
      {
        return createDeclarativeEntityDefAdapter();
      }
      @Override
      public Adapter caseImperativeEntityDef(ImperativeEntityDef object)
      {
        return createImperativeEntityDefAdapter();
      }
      @Override
      public Adapter caseImperativeActionDef(ImperativeActionDef object)
      {
        return createImperativeActionDefAdapter();
      }
      @Override
      public Adapter caseActionDef(ActionDef object)
      {
        return createActionDefAdapter();
      }
      @Override
      public Adapter caseStateDef(StateDef object)
      {
        return createStateDefAdapter();
      }
      @Override
      public Adapter caseStateName(StateName object)
      {
        return createStateNameAdapter();
      }
      @Override
      public Adapter casePropertyDef(PropertyDef object)
      {
        return createPropertyDefAdapter();
      }
      @Override
      public Adapter caseImperativeStateDef(ImperativeStateDef object)
      {
        return createImperativeStateDefAdapter();
      }
      @Override
      public Adapter caseImperativeStateName(ImperativeStateName object)
      {
        return createImperativeStateNameAdapter();
      }
      @Override
      public Adapter caseImperativePropertyDef(ImperativePropertyDef object)
      {
        return createImperativePropertyDefAdapter();
      }
      @Override
      public Adapter caseScenario(Scenario object)
      {
        return createScenarioAdapter();
      }
      @Override
      public Adapter caseImperativeScenario(ImperativeScenario object)
      {
        return createImperativeScenarioAdapter();
      }
      @Override
      public Adapter caseDeclarativeScenarioState(DeclarativeScenarioState object)
      {
        return createDeclarativeScenarioStateAdapter();
      }
      @Override
      public Adapter caseDeclarativeScenarioStateAnd(DeclarativeScenarioStateAnd object)
      {
        return createDeclarativeScenarioStateAndAdapter();
      }
      @Override
      public Adapter caseImperativeScenarioState(ImperativeScenarioState object)
      {
        return createImperativeScenarioStateAdapter();
      }
      @Override
      public Adapter caseImperativeScenarioStateAnd(ImperativeScenarioStateAnd object)
      {
        return createImperativeScenarioStateAndAdapter();
      }
      @Override
      public Adapter caseDeclarativeScenarioAction(DeclarativeScenarioAction object)
      {
        return createDeclarativeScenarioActionAdapter();
      }
      @Override
      public Adapter caseDeclarativeScenarioActionAnd(DeclarativeScenarioActionAnd object)
      {
        return createDeclarativeScenarioActionAndAdapter();
      }
      @Override
      public Adapter caseImperativeScenarioAction(ImperativeScenarioAction object)
      {
        return createImperativeScenarioActionAdapter();
      }
      @Override
      public Adapter caseImperativeScenarioActionAnd(ImperativeScenarioActionAnd object)
      {
        return createImperativeScenarioActionAndAdapter();
      }
      @Override
      public Adapter caseDeclarativeEntityRef(DeclarativeEntityRef object)
      {
        return createDeclarativeEntityRefAdapter();
      }
      @Override
      public Adapter caseImperativeEntityRef(ImperativeEntityRef object)
      {
        return createImperativeEntityRefAdapter();
      }
      @Override
      public Adapter caseActionRef(ActionRef object)
      {
        return createActionRefAdapter();
      }
      @Override
      public Adapter caseImperativeActionRef(ImperativeActionRef object)
      {
        return createImperativeActionRefAdapter();
      }
      @Override
      public Adapter casePropertyRef(PropertyRef object)
      {
        return createPropertyRefAdapter();
      }
      @Override
      public Adapter caseImperativePropertyRef(ImperativePropertyRef object)
      {
        return createImperativePropertyRefAdapter();
      }
      @Override
      public Adapter caseDeclarativeEntityOrPropertyRef(DeclarativeEntityOrPropertyRef object)
      {
        return createDeclarativeEntityOrPropertyRefAdapter();
      }
      @Override
      public Adapter caseDeclarativeEntityStatePhrase(DeclarativeEntityStatePhrase object)
      {
        return createDeclarativeEntityStatePhraseAdapter();
      }
      @Override
      public Adapter caseDeclarativeEntityStatePhraseWithProperty(DeclarativeEntityStatePhraseWithProperty object)
      {
        return createDeclarativeEntityStatePhraseWithPropertyAdapter();
      }
      @Override
      public Adapter caseImperativeEntityStatePhrase(ImperativeEntityStatePhrase object)
      {
        return createImperativeEntityStatePhraseAdapter();
      }
      @Override
      public Adapter caseImperativeEntityStatePhraseWithProperty(ImperativeEntityStatePhraseWithProperty object)
      {
        return createImperativeEntityStatePhraseWithPropertyAdapter();
      }
      @Override
      public Adapter caseDeclarativeEntityPropertyStatePhrase(DeclarativeEntityPropertyStatePhrase object)
      {
        return createDeclarativeEntityPropertyStatePhraseAdapter();
      }
      @Override
      public Adapter caseImperativeEntityPropertyStatePhrase(ImperativeEntityPropertyStatePhrase object)
      {
        return createImperativeEntityPropertyStatePhraseAdapter();
      }
      @Override
      public Adapter caseVerbAction(VerbAction object)
      {
        return createVerbActionAdapter();
      }
      @Override
      public Adapter caseDeclarativeEntityAction(DeclarativeEntityAction object)
      {
        return createDeclarativeEntityActionAdapter();
      }
      @Override
      public Adapter caseDeclarativeEntityPropertyAction(DeclarativeEntityPropertyAction object)
      {
        return createDeclarativeEntityPropertyActionAdapter();
      }
      @Override
      public Adapter caseImperativeVerbAction(ImperativeVerbAction object)
      {
        return createImperativeVerbActionAdapter();
      }
      @Override
      public Adapter caseImperativeEntityAction(ImperativeEntityAction object)
      {
        return createImperativeEntityActionAdapter();
      }
      @Override
      public Adapter caseImperativeEntityPropertyAction(ImperativeEntityPropertyAction object)
      {
        return createImperativeEntityPropertyActionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ModelRef <em>Model Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ModelRef
   * @generated
   */
  public Adapter createModelRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityDef <em>Declarative Entity Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityDef
   * @generated
   */
  public Adapter createDeclarativeEntityDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativeEntityDef <em>Imperative Entity Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativeEntityDef
   * @generated
   */
  public Adapter createImperativeEntityDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativeActionDef <em>Imperative Action Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativeActionDef
   * @generated
   */
  public Adapter createImperativeActionDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ActionDef <em>Action Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ActionDef
   * @generated
   */
  public Adapter createActionDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.StateDef <em>State Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.StateDef
   * @generated
   */
  public Adapter createStateDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.StateName <em>State Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.StateName
   * @generated
   */
  public Adapter createStateNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.PropertyDef <em>Property Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.PropertyDef
   * @generated
   */
  public Adapter createPropertyDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativeStateDef <em>Imperative State Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativeStateDef
   * @generated
   */
  public Adapter createImperativeStateDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativeStateName <em>Imperative State Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativeStateName
   * @generated
   */
  public Adapter createImperativeStateNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativePropertyDef <em>Imperative Property Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativePropertyDef
   * @generated
   */
  public Adapter createImperativePropertyDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.Scenario <em>Scenario</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.Scenario
   * @generated
   */
  public Adapter createScenarioAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativeScenario <em>Imperative Scenario</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativeScenario
   * @generated
   */
  public Adapter createImperativeScenarioAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.DeclarativeScenarioState <em>Declarative Scenario State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.DeclarativeScenarioState
   * @generated
   */
  public Adapter createDeclarativeScenarioStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.DeclarativeScenarioStateAnd <em>Declarative Scenario State And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.DeclarativeScenarioStateAnd
   * @generated
   */
  public Adapter createDeclarativeScenarioStateAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativeScenarioState <em>Imperative Scenario State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativeScenarioState
   * @generated
   */
  public Adapter createImperativeScenarioStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativeScenarioStateAnd <em>Imperative Scenario State And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativeScenarioStateAnd
   * @generated
   */
  public Adapter createImperativeScenarioStateAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.DeclarativeScenarioAction <em>Declarative Scenario Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.DeclarativeScenarioAction
   * @generated
   */
  public Adapter createDeclarativeScenarioActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.DeclarativeScenarioActionAnd <em>Declarative Scenario Action And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.DeclarativeScenarioActionAnd
   * @generated
   */
  public Adapter createDeclarativeScenarioActionAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativeScenarioAction <em>Imperative Scenario Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativeScenarioAction
   * @generated
   */
  public Adapter createImperativeScenarioActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativeScenarioActionAnd <em>Imperative Scenario Action And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativeScenarioActionAnd
   * @generated
   */
  public Adapter createImperativeScenarioActionAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityRef <em>Declarative Entity Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityRef
   * @generated
   */
  public Adapter createDeclarativeEntityRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativeEntityRef <em>Imperative Entity Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativeEntityRef
   * @generated
   */
  public Adapter createImperativeEntityRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ActionRef <em>Action Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ActionRef
   * @generated
   */
  public Adapter createActionRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativeActionRef <em>Imperative Action Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativeActionRef
   * @generated
   */
  public Adapter createImperativeActionRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.PropertyRef <em>Property Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.PropertyRef
   * @generated
   */
  public Adapter createPropertyRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativePropertyRef <em>Imperative Property Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativePropertyRef
   * @generated
   */
  public Adapter createImperativePropertyRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityOrPropertyRef <em>Declarative Entity Or Property Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityOrPropertyRef
   * @generated
   */
  public Adapter createDeclarativeEntityOrPropertyRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityStatePhrase <em>Declarative Entity State Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityStatePhrase
   * @generated
   */
  public Adapter createDeclarativeEntityStatePhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityStatePhraseWithProperty <em>Declarative Entity State Phrase With Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityStatePhraseWithProperty
   * @generated
   */
  public Adapter createDeclarativeEntityStatePhraseWithPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativeEntityStatePhrase <em>Imperative Entity State Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativeEntityStatePhrase
   * @generated
   */
  public Adapter createImperativeEntityStatePhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativeEntityStatePhraseWithProperty <em>Imperative Entity State Phrase With Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativeEntityStatePhraseWithProperty
   * @generated
   */
  public Adapter createImperativeEntityStatePhraseWithPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityPropertyStatePhrase <em>Declarative Entity Property State Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityPropertyStatePhrase
   * @generated
   */
  public Adapter createDeclarativeEntityPropertyStatePhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativeEntityPropertyStatePhrase <em>Imperative Entity Property State Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativeEntityPropertyStatePhrase
   * @generated
   */
  public Adapter createImperativeEntityPropertyStatePhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.VerbAction <em>Verb Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.VerbAction
   * @generated
   */
  public Adapter createVerbActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityAction <em>Declarative Entity Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityAction
   * @generated
   */
  public Adapter createDeclarativeEntityActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityPropertyAction <em>Declarative Entity Property Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.DeclarativeEntityPropertyAction
   * @generated
   */
  public Adapter createDeclarativeEntityPropertyActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativeVerbAction <em>Imperative Verb Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativeVerbAction
   * @generated
   */
  public Adapter createImperativeVerbActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativeEntityAction <em>Imperative Entity Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativeEntityAction
   * @generated
   */
  public Adapter createImperativeEntityActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.sdu.bdd.xtext.bddDsl.ImperativeEntityPropertyAction <em>Imperative Entity Property Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.sdu.bdd.xtext.bddDsl.ImperativeEntityPropertyAction
   * @generated
   */
  public Adapter createImperativeEntityPropertyActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //BddDslAdapterFactory
