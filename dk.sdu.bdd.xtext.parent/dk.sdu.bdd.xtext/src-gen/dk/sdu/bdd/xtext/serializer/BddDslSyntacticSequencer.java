/*
 * generated by Xtext 2.32.0
 */
package dk.sdu.bdd.xtext.serializer;

import com.google.inject.Inject;
import dk.sdu.bdd.xtext.services.BddDslGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class BddDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected BddDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ActionDef_____AndKeyword_1_0_0_or_TheKeyword_1_0_1___IDTerminalRuleCall_1_1__q;
	protected AbstractElementAlias match_DeclarativeEntityDef___HyphenMinusKeyword_3_0_IDTerminalRuleCall_3_1__q;
	protected AbstractElementAlias match_ImperativeActionDef___IDTerminalRuleCall_1_1_or_____AndKeyword_1_0_0_0_or_TheKeyword_1_0_0_1___IDTerminalRuleCall_1_0_1____q;
	protected AbstractElementAlias match_ImperativeEntityDef___HyphenMinusKeyword_3_0_IDTerminalRuleCall_3_1__q;
	protected AbstractElementAlias match_ImperativePropertyDef_IDTerminalRuleCall_1_q;
	protected AbstractElementAlias match_ImperativeStateName_____AndKeyword_1_0_0_or_OffKeyword_1_0_1___IDTerminalRuleCall_1_1__q;
	protected AbstractElementAlias match_PropertyDef_IDTerminalRuleCall_1_q;
	protected AbstractElementAlias match_StateName_____AndKeyword_1_0_0_or_OffKeyword_1_0_1___IDTerminalRuleCall_1_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (BddDslGrammarAccess) access;
		match_ActionDef_____AndKeyword_1_0_0_or_TheKeyword_1_0_1___IDTerminalRuleCall_1_1__q = new GroupAlias(false, true, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getActionDefAccess().getAndKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getActionDefAccess().getTheKeyword_1_0_1())), new TokenAlias(false, false, grammarAccess.getActionDefAccess().getIDTerminalRuleCall_1_1()));
		match_DeclarativeEntityDef___HyphenMinusKeyword_3_0_IDTerminalRuleCall_3_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getDeclarativeEntityDefAccess().getHyphenMinusKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getDeclarativeEntityDefAccess().getIDTerminalRuleCall_3_1()));
		match_ImperativeActionDef___IDTerminalRuleCall_1_1_or_____AndKeyword_1_0_0_0_or_TheKeyword_1_0_0_1___IDTerminalRuleCall_1_0_1____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getImperativeActionDefAccess().getAndKeyword_1_0_0_0()), new TokenAlias(false, false, grammarAccess.getImperativeActionDefAccess().getTheKeyword_1_0_0_1())), new TokenAlias(false, false, grammarAccess.getImperativeActionDefAccess().getIDTerminalRuleCall_1_0_1())), new TokenAlias(false, false, grammarAccess.getImperativeActionDefAccess().getIDTerminalRuleCall_1_1()));
		match_ImperativeEntityDef___HyphenMinusKeyword_3_0_IDTerminalRuleCall_3_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getImperativeEntityDefAccess().getHyphenMinusKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getImperativeEntityDefAccess().getIDTerminalRuleCall_3_1()));
		match_ImperativePropertyDef_IDTerminalRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getImperativePropertyDefAccess().getIDTerminalRuleCall_1());
		match_ImperativeStateName_____AndKeyword_1_0_0_or_OffKeyword_1_0_1___IDTerminalRuleCall_1_1__q = new GroupAlias(false, true, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getImperativeStateNameAccess().getAndKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getImperativeStateNameAccess().getOffKeyword_1_0_1())), new TokenAlias(false, false, grammarAccess.getImperativeStateNameAccess().getIDTerminalRuleCall_1_1()));
		match_PropertyDef_IDTerminalRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getPropertyDefAccess().getIDTerminalRuleCall_1());
		match_StateName_____AndKeyword_1_0_0_or_OffKeyword_1_0_1___IDTerminalRuleCall_1_1__q = new GroupAlias(false, true, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getStateNameAccess().getAndKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getStateNameAccess().getOffKeyword_1_0_1())), new TokenAlias(false, false, grammarAccess.getStateNameAccess().getIDTerminalRuleCall_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPrePostWordsRule())
			return getPrePostWordsToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getToBeWordsRule())
			return getToBeWordsToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * PrePostWords:
	 * 	('all')?
	 * ;
	 */
	protected String getPrePostWordsToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * ToBeWords:
	 * 	('is'|'are'|'is' 'not'|'are' 'not')?
	 * ;
	 */
	protected String getToBeWordsToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ActionDef_____AndKeyword_1_0_0_or_TheKeyword_1_0_1___IDTerminalRuleCall_1_1__q.equals(syntax))
				emit_ActionDef_____AndKeyword_1_0_0_or_TheKeyword_1_0_1___IDTerminalRuleCall_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeclarativeEntityDef___HyphenMinusKeyword_3_0_IDTerminalRuleCall_3_1__q.equals(syntax))
				emit_DeclarativeEntityDef___HyphenMinusKeyword_3_0_IDTerminalRuleCall_3_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImperativeActionDef___IDTerminalRuleCall_1_1_or_____AndKeyword_1_0_0_0_or_TheKeyword_1_0_0_1___IDTerminalRuleCall_1_0_1____q.equals(syntax))
				emit_ImperativeActionDef___IDTerminalRuleCall_1_1_or_____AndKeyword_1_0_0_0_or_TheKeyword_1_0_0_1___IDTerminalRuleCall_1_0_1____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImperativeEntityDef___HyphenMinusKeyword_3_0_IDTerminalRuleCall_3_1__q.equals(syntax))
				emit_ImperativeEntityDef___HyphenMinusKeyword_3_0_IDTerminalRuleCall_3_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImperativePropertyDef_IDTerminalRuleCall_1_q.equals(syntax))
				emit_ImperativePropertyDef_IDTerminalRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImperativeStateName_____AndKeyword_1_0_0_or_OffKeyword_1_0_1___IDTerminalRuleCall_1_1__q.equals(syntax))
				emit_ImperativeStateName_____AndKeyword_1_0_0_or_OffKeyword_1_0_1___IDTerminalRuleCall_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PropertyDef_IDTerminalRuleCall_1_q.equals(syntax))
				emit_PropertyDef_IDTerminalRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StateName_____AndKeyword_1_0_0_or_OffKeyword_1_0_1___IDTerminalRuleCall_1_1__q.equals(syntax))
				emit_StateName_____AndKeyword_1_0_0_or_OffKeyword_1_0_1___IDTerminalRuleCall_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('and' | 'the') ID)?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '[' preposition=PREP
	 *     name=ID (ambiguity) 'the' argument=ID
	 *     name=ID (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ActionDef_____AndKeyword_1_0_0_or_TheKeyword_1_0_1___IDTerminalRuleCall_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('-' ID)?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) 'is' superEntities+=[DeclarativeEntityDef|ID]
	 *     name=ID (ambiguity) '{' 'actions:' actions+=ActionDef
	 *     name=ID (ambiguity) '{' 'properties:' properties+=PropertyDef
	 *     name=ID (ambiguity) '{' 'states:' states+=StateDef
	 *     name=ID (ambiguity) '{' '}' (rule end)
	 
	 * </pre>
	 */
	protected void emit_DeclarativeEntityDef___HyphenMinusKeyword_3_0_IDTerminalRuleCall_3_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ((('and' | 'the') ID) | ID)?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '[' preposition=PREP
	 *     name=ID (ambiguity) 'the' argument=ID
	 *     name=ID (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ImperativeActionDef___IDTerminalRuleCall_1_1_or_____AndKeyword_1_0_0_0_or_TheKeyword_1_0_0_1___IDTerminalRuleCall_1_0_1____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('-' ID)?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) 'is' superEntities+=[ImperativeEntityDef|ID]
	 *     name=ID (ambiguity) '{' 'actions:' actions+=ImperativeActionDef
	 *     name=ID (ambiguity) '{' 'properties:' properties+=ImperativePropertyDef
	 *     name=ID (ambiguity) '{' 'states:' states+=ImperativeStateDef
	 *     name=ID (ambiguity) '{' '}' (rule end)
	 
	 * </pre>
	 */
	protected void emit_ImperativeEntityDef___HyphenMinusKeyword_3_0_IDTerminalRuleCall_3_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ID?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ImperativePropertyDef_IDTerminalRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('and' | 'off') ID)?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ImperativeStateName_____AndKeyword_1_0_0_or_OffKeyword_1_0_1___IDTerminalRuleCall_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ID?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_PropertyDef_IDTerminalRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('and' | 'off') ID)?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_StateName_____AndKeyword_1_0_0_or_OffKeyword_1_0_1___IDTerminalRuleCall_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
