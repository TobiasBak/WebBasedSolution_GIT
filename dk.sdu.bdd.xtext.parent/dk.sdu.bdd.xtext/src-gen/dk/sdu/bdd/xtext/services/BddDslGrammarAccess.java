/*
 * generated by Xtext 2.32.0
 */
package dk.sdu.bdd.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BddDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cModelRefsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cModelRefsModelRefParserRuleCall_1_0_0 = (RuleCall)cModelRefsAssignment_1_0.eContents().get(0);
		private final Assignment cDeclarativeEntityDefAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDeclarativeEntityDefDeclarativeEntityDefParserRuleCall_1_1_0 = (RuleCall)cDeclarativeEntityDefAssignment_1_1.eContents().get(0);
		private final Assignment cImperativeEntityDefAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cImperativeEntityDefImperativeEntityDefParserRuleCall_1_2_0 = (RuleCall)cImperativeEntityDefAssignment_1_2.eContents().get(0);
		private final Assignment cScenariosAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cScenariosScenarioParserRuleCall_1_3_0 = (RuleCall)cScenariosAssignment_1_3.eContents().get(0);
		
		//Model:
		//    ('model' name = ID)
		//    (
		//        (modelRefs += ModelRef) |
		//        (declarativeEntityDef += DeclarativeEntityDef) |
		//        (imperativeEntityDef += ImperativeEntityDef) |
		//        (scenarios += Scenario)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('model' name = ID)
		//(
		//    (modelRefs += ModelRef) |
		//    (declarativeEntityDef += DeclarativeEntityDef) |
		//    (imperativeEntityDef += ImperativeEntityDef) |
		//    (scenarios += Scenario)
		//)*
		public Group getGroup() { return cGroup; }
		
		//('model' name = ID)
		public Group getGroup_0() { return cGroup_0; }
		
		//'model'
		public Keyword getModelKeyword_0_0() { return cModelKeyword_0_0; }
		
		//name = ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//(
		//    (modelRefs += ModelRef) |
		//    (declarativeEntityDef += DeclarativeEntityDef) |
		//    (imperativeEntityDef += ImperativeEntityDef) |
		//    (scenarios += Scenario)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(modelRefs += ModelRef)
		public Assignment getModelRefsAssignment_1_0() { return cModelRefsAssignment_1_0; }
		
		//ModelRef
		public RuleCall getModelRefsModelRefParserRuleCall_1_0_0() { return cModelRefsModelRefParserRuleCall_1_0_0; }
		
		//(declarativeEntityDef += DeclarativeEntityDef)
		public Assignment getDeclarativeEntityDefAssignment_1_1() { return cDeclarativeEntityDefAssignment_1_1; }
		
		//DeclarativeEntityDef
		public RuleCall getDeclarativeEntityDefDeclarativeEntityDefParserRuleCall_1_1_0() { return cDeclarativeEntityDefDeclarativeEntityDefParserRuleCall_1_1_0; }
		
		//(imperativeEntityDef += ImperativeEntityDef)
		public Assignment getImperativeEntityDefAssignment_1_2() { return cImperativeEntityDefAssignment_1_2; }
		
		//ImperativeEntityDef
		public RuleCall getImperativeEntityDefImperativeEntityDefParserRuleCall_1_2_0() { return cImperativeEntityDefImperativeEntityDefParserRuleCall_1_2_0; }
		
		//(scenarios += Scenario)
		public Assignment getScenariosAssignment_1_3() { return cScenariosAssignment_1_3; }
		
		//Scenario
		public RuleCall getScenariosScenarioParserRuleCall_1_3_0() { return cScenariosScenarioParserRuleCall_1_3_0; }
	}
	public class ModelRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ModelRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelRefModelCrossReference_1_0 = (CrossReference)cModelRefAssignment_1.eContents().get(0);
		private final RuleCall cModelRefModelIDTerminalRuleCall_1_0_1 = (RuleCall)cModelRefModelCrossReference_1_0.eContents().get(1);
		
		//ModelRef:
		//    'using' modelRef = [Model]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'using' modelRef = [Model]
		public Group getGroup() { return cGroup; }
		
		//'using'
		public Keyword getUsingKeyword_0() { return cUsingKeyword_0; }
		
		//modelRef = [Model]
		public Assignment getModelRefAssignment_1() { return cModelRefAssignment_1; }
		
		//[Model]
		public CrossReference getModelRefModelCrossReference_1_0() { return cModelRefModelCrossReference_1_0; }
		
		//ID
		public RuleCall getModelRefModelIDTerminalRuleCall_1_0_1() { return cModelRefModelIDTerminalRuleCall_1_0_1; }
	}
	public class DeclarativeEntityDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeEntityDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeclarativeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperEntitiesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSuperEntitiesDeclarativeEntityDefCrossReference_4_1_0 = (CrossReference)cSuperEntitiesAssignment_4_1.eContents().get(0);
		private final RuleCall cSuperEntitiesDeclarativeEntityDefIDTerminalRuleCall_4_1_0_1 = (RuleCall)cSuperEntitiesDeclarativeEntityDefCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cSuperEntitiesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cSuperEntitiesDeclarativeEntityDefCrossReference_4_2_1_0 = (CrossReference)cSuperEntitiesAssignment_4_2_1.eContents().get(0);
		private final RuleCall cSuperEntitiesDeclarativeEntityDefIDTerminalRuleCall_4_2_1_0_1 = (RuleCall)cSuperEntitiesDeclarativeEntityDefCrossReference_4_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cActionsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cActionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cActionsActionDefParserRuleCall_6_1_0 = (RuleCall)cActionsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cActionsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cActionsActionDefParserRuleCall_6_2_1_0 = (RuleCall)cActionsAssignment_6_2_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cStatesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cStatesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cStatesStateDefParserRuleCall_7_1_0 = (RuleCall)cStatesAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cStatesAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cStatesStateDefParserRuleCall_7_2_1_0 = (RuleCall)cStatesAssignment_7_2_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cPropertiesKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cPropertiesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cPropertiesPropertyDefParserRuleCall_8_1_0 = (RuleCall)cPropertiesAssignment_8_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cPropertiesPropertyDefParserRuleCall_8_2_1_0 = (RuleCall)cPropertiesAssignment_8_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//DeclarativeEntityDef:
		//    'declarative' 'entity' name = ID ('-'ID)? ('is' superEntities += [DeclarativeEntityDef] (',' superEntities += [DeclarativeEntityDef])*)? '{'
		//        ('actions:' (actions += ActionDef) ((',') actions += ActionDef)*)?
		//        ('states:' (states += StateDef) ((',') states += StateDef)*)?
		//        ('properties:' (properties += PropertyDef) ((',') properties += PropertyDef)*)?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'declarative' 'entity' name = ID ('-'ID)? ('is' superEntities += [DeclarativeEntityDef] (',' superEntities += [DeclarativeEntityDef])*)? '{'
		//    ('actions:' (actions += ActionDef) ((',') actions += ActionDef)*)?
		//    ('states:' (states += StateDef) ((',') states += StateDef)*)?
		//    ('properties:' (properties += PropertyDef) ((',') properties += PropertyDef)*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'declarative'
		public Keyword getDeclarativeKeyword_0() { return cDeclarativeKeyword_0; }
		
		//'entity'
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }
		
		//name = ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('-'ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3_0() { return cHyphenMinusKeyword_3_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3_1() { return cIDTerminalRuleCall_3_1; }
		
		//('is' superEntities += [DeclarativeEntityDef] (',' superEntities += [DeclarativeEntityDef])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'is'
		public Keyword getIsKeyword_4_0() { return cIsKeyword_4_0; }
		
		//superEntities += [DeclarativeEntityDef]
		public Assignment getSuperEntitiesAssignment_4_1() { return cSuperEntitiesAssignment_4_1; }
		
		//[DeclarativeEntityDef]
		public CrossReference getSuperEntitiesDeclarativeEntityDefCrossReference_4_1_0() { return cSuperEntitiesDeclarativeEntityDefCrossReference_4_1_0; }
		
		//ID
		public RuleCall getSuperEntitiesDeclarativeEntityDefIDTerminalRuleCall_4_1_0_1() { return cSuperEntitiesDeclarativeEntityDefIDTerminalRuleCall_4_1_0_1; }
		
		//(',' superEntities += [DeclarativeEntityDef])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//superEntities += [DeclarativeEntityDef]
		public Assignment getSuperEntitiesAssignment_4_2_1() { return cSuperEntitiesAssignment_4_2_1; }
		
		//[DeclarativeEntityDef]
		public CrossReference getSuperEntitiesDeclarativeEntityDefCrossReference_4_2_1_0() { return cSuperEntitiesDeclarativeEntityDefCrossReference_4_2_1_0; }
		
		//ID
		public RuleCall getSuperEntitiesDeclarativeEntityDefIDTerminalRuleCall_4_2_1_0_1() { return cSuperEntitiesDeclarativeEntityDefIDTerminalRuleCall_4_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//('actions:' (actions += ActionDef) ((',') actions += ActionDef)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'actions:'
		public Keyword getActionsKeyword_6_0() { return cActionsKeyword_6_0; }
		
		//(actions += ActionDef)
		public Assignment getActionsAssignment_6_1() { return cActionsAssignment_6_1; }
		
		//ActionDef
		public RuleCall getActionsActionDefParserRuleCall_6_1_0() { return cActionsActionDefParserRuleCall_6_1_0; }
		
		//((',') actions += ActionDef)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//(',')
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//actions += ActionDef
		public Assignment getActionsAssignment_6_2_1() { return cActionsAssignment_6_2_1; }
		
		//ActionDef
		public RuleCall getActionsActionDefParserRuleCall_6_2_1_0() { return cActionsActionDefParserRuleCall_6_2_1_0; }
		
		//('states:' (states += StateDef) ((',') states += StateDef)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'states:'
		public Keyword getStatesKeyword_7_0() { return cStatesKeyword_7_0; }
		
		//(states += StateDef)
		public Assignment getStatesAssignment_7_1() { return cStatesAssignment_7_1; }
		
		//StateDef
		public RuleCall getStatesStateDefParserRuleCall_7_1_0() { return cStatesStateDefParserRuleCall_7_1_0; }
		
		//((',') states += StateDef)*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//(',')
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }
		
		//states += StateDef
		public Assignment getStatesAssignment_7_2_1() { return cStatesAssignment_7_2_1; }
		
		//StateDef
		public RuleCall getStatesStateDefParserRuleCall_7_2_1_0() { return cStatesStateDefParserRuleCall_7_2_1_0; }
		
		//('properties:' (properties += PropertyDef) ((',') properties += PropertyDef)*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'properties:'
		public Keyword getPropertiesKeyword_8_0() { return cPropertiesKeyword_8_0; }
		
		//(properties += PropertyDef)
		public Assignment getPropertiesAssignment_8_1() { return cPropertiesAssignment_8_1; }
		
		//PropertyDef
		public RuleCall getPropertiesPropertyDefParserRuleCall_8_1_0() { return cPropertiesPropertyDefParserRuleCall_8_1_0; }
		
		//((',') properties += PropertyDef)*
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//(',')
		public Keyword getCommaKeyword_8_2_0() { return cCommaKeyword_8_2_0; }
		
		//properties += PropertyDef
		public Assignment getPropertiesAssignment_8_2_1() { return cPropertiesAssignment_8_2_1; }
		
		//PropertyDef
		public RuleCall getPropertiesPropertyDefParserRuleCall_8_2_1_0() { return cPropertiesPropertyDefParserRuleCall_8_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ImperativeEntityDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeEntityDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImperativeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperEntitiesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSuperEntitiesImperativeEntityDefCrossReference_4_1_0 = (CrossReference)cSuperEntitiesAssignment_4_1.eContents().get(0);
		private final RuleCall cSuperEntitiesImperativeEntityDefIDTerminalRuleCall_4_1_0_1 = (RuleCall)cSuperEntitiesImperativeEntityDefCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cSuperEntitiesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cSuperEntitiesImperativeEntityDefCrossReference_4_2_1_0 = (CrossReference)cSuperEntitiesAssignment_4_2_1.eContents().get(0);
		private final RuleCall cSuperEntitiesImperativeEntityDefIDTerminalRuleCall_4_2_1_0_1 = (RuleCall)cSuperEntitiesImperativeEntityDefCrossReference_4_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cActionsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cActionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cActionsImperativeActionDefParserRuleCall_6_1_0 = (RuleCall)cActionsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cActionsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cActionsImperativeActionDefParserRuleCall_6_2_1_0 = (RuleCall)cActionsAssignment_6_2_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cStatesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cStatesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cStatesImperativeStateDefParserRuleCall_7_1_0 = (RuleCall)cStatesAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cStatesAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cStatesImperativeStateDefParserRuleCall_7_2_1_0 = (RuleCall)cStatesAssignment_7_2_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cPropertiesKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cPropertiesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cPropertiesImperativePropertyDefParserRuleCall_8_1_0 = (RuleCall)cPropertiesAssignment_8_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cPropertiesImperativePropertyDefParserRuleCall_8_2_1_0 = (RuleCall)cPropertiesAssignment_8_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ImperativeEntityDef:
		//    'imperative' 'entity' name = ID ('-'ID)? ('is' superEntities += [ImperativeEntityDef] (',' superEntities += [ImperativeEntityDef])*)? '{'
		//        ('actions:' (actions += ImperativeActionDef)  ((',') actions += ImperativeActionDef)*)?
		//        ('states:' (states += ImperativeStateDef) ((',') states += ImperativeStateDef)*)?
		//        ('properties:' (properties += ImperativePropertyDef) ((',') properties += ImperativePropertyDef)*)?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'imperative' 'entity' name = ID ('-'ID)? ('is' superEntities += [ImperativeEntityDef] (',' superEntities += [ImperativeEntityDef])*)? '{'
		//    ('actions:' (actions += ImperativeActionDef)  ((',') actions += ImperativeActionDef)*)?
		//    ('states:' (states += ImperativeStateDef) ((',') states += ImperativeStateDef)*)?
		//    ('properties:' (properties += ImperativePropertyDef) ((',') properties += ImperativePropertyDef)*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'imperative'
		public Keyword getImperativeKeyword_0() { return cImperativeKeyword_0; }
		
		//'entity'
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }
		
		//name = ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('-'ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3_0() { return cHyphenMinusKeyword_3_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3_1() { return cIDTerminalRuleCall_3_1; }
		
		//('is' superEntities += [ImperativeEntityDef] (',' superEntities += [ImperativeEntityDef])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'is'
		public Keyword getIsKeyword_4_0() { return cIsKeyword_4_0; }
		
		//superEntities += [ImperativeEntityDef]
		public Assignment getSuperEntitiesAssignment_4_1() { return cSuperEntitiesAssignment_4_1; }
		
		//[ImperativeEntityDef]
		public CrossReference getSuperEntitiesImperativeEntityDefCrossReference_4_1_0() { return cSuperEntitiesImperativeEntityDefCrossReference_4_1_0; }
		
		//ID
		public RuleCall getSuperEntitiesImperativeEntityDefIDTerminalRuleCall_4_1_0_1() { return cSuperEntitiesImperativeEntityDefIDTerminalRuleCall_4_1_0_1; }
		
		//(',' superEntities += [ImperativeEntityDef])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//superEntities += [ImperativeEntityDef]
		public Assignment getSuperEntitiesAssignment_4_2_1() { return cSuperEntitiesAssignment_4_2_1; }
		
		//[ImperativeEntityDef]
		public CrossReference getSuperEntitiesImperativeEntityDefCrossReference_4_2_1_0() { return cSuperEntitiesImperativeEntityDefCrossReference_4_2_1_0; }
		
		//ID
		public RuleCall getSuperEntitiesImperativeEntityDefIDTerminalRuleCall_4_2_1_0_1() { return cSuperEntitiesImperativeEntityDefIDTerminalRuleCall_4_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//('actions:' (actions += ImperativeActionDef)  ((',') actions += ImperativeActionDef)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'actions:'
		public Keyword getActionsKeyword_6_0() { return cActionsKeyword_6_0; }
		
		//(actions += ImperativeActionDef)
		public Assignment getActionsAssignment_6_1() { return cActionsAssignment_6_1; }
		
		//ImperativeActionDef
		public RuleCall getActionsImperativeActionDefParserRuleCall_6_1_0() { return cActionsImperativeActionDefParserRuleCall_6_1_0; }
		
		//((',') actions += ImperativeActionDef)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//(',')
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//actions += ImperativeActionDef
		public Assignment getActionsAssignment_6_2_1() { return cActionsAssignment_6_2_1; }
		
		//ImperativeActionDef
		public RuleCall getActionsImperativeActionDefParserRuleCall_6_2_1_0() { return cActionsImperativeActionDefParserRuleCall_6_2_1_0; }
		
		//('states:' (states += ImperativeStateDef) ((',') states += ImperativeStateDef)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'states:'
		public Keyword getStatesKeyword_7_0() { return cStatesKeyword_7_0; }
		
		//(states += ImperativeStateDef)
		public Assignment getStatesAssignment_7_1() { return cStatesAssignment_7_1; }
		
		//ImperativeStateDef
		public RuleCall getStatesImperativeStateDefParserRuleCall_7_1_0() { return cStatesImperativeStateDefParserRuleCall_7_1_0; }
		
		//((',') states += ImperativeStateDef)*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//(',')
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }
		
		//states += ImperativeStateDef
		public Assignment getStatesAssignment_7_2_1() { return cStatesAssignment_7_2_1; }
		
		//ImperativeStateDef
		public RuleCall getStatesImperativeStateDefParserRuleCall_7_2_1_0() { return cStatesImperativeStateDefParserRuleCall_7_2_1_0; }
		
		//('properties:' (properties += ImperativePropertyDef) ((',') properties += ImperativePropertyDef)*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'properties:'
		public Keyword getPropertiesKeyword_8_0() { return cPropertiesKeyword_8_0; }
		
		//(properties += ImperativePropertyDef)
		public Assignment getPropertiesAssignment_8_1() { return cPropertiesAssignment_8_1; }
		
		//ImperativePropertyDef
		public RuleCall getPropertiesImperativePropertyDefParserRuleCall_8_1_0() { return cPropertiesImperativePropertyDefParserRuleCall_8_1_0; }
		
		//((',') properties += ImperativePropertyDef)*
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//(',')
		public Keyword getCommaKeyword_8_2_0() { return cCommaKeyword_8_2_0; }
		
		//properties += ImperativePropertyDef
		public Assignment getPropertiesAssignment_8_2_1() { return cPropertiesAssignment_8_2_1; }
		
		//ImperativePropertyDef
		public RuleCall getPropertiesImperativePropertyDefParserRuleCall_8_2_1_0() { return cPropertiesImperativePropertyDefParserRuleCall_8_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ImperativeActionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeActionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Keyword cAndKeyword_1_0_0_0 = (Keyword)cAlternatives_1_0_0.eContents().get(0);
		private final Keyword cTheKeyword_1_0_0_1 = (Keyword)cAlternatives_1_0_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPrepositionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPrepositionPREPParserRuleCall_2_1_0 = (RuleCall)cPrepositionAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTheKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgumentAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgumentIDTerminalRuleCall_3_1_0 = (RuleCall)cArgumentAssignment_3_1.eContents().get(0);
		
		//ImperativeActionDef:
		//    name = ID ((('and'|'the') ID)? | ID)  ('[' (preposition = PREP) ']')?     ('the' argument = ID)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID ((('and'|'the') ID)? | ID)  ('[' (preposition = PREP) ']')?	 ('the' argument = ID)?
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//((('and'|'the') ID)? | ID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(('and'|'the') ID)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//('and'|'the')
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//'and'
		public Keyword getAndKeyword_1_0_0_0() { return cAndKeyword_1_0_0_0; }
		
		//'the'
		public Keyword getTheKeyword_1_0_0_1() { return cTheKeyword_1_0_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0_1() { return cIDTerminalRuleCall_1_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
		
		//('[' (preposition = PREP) ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//(preposition = PREP)
		public Assignment getPrepositionAssignment_2_1() { return cPrepositionAssignment_2_1; }
		
		//PREP
		public RuleCall getPrepositionPREPParserRuleCall_2_1_0() { return cPrepositionPREPParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//('the' argument = ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'the'
		public Keyword getTheKeyword_3_0() { return cTheKeyword_3_0; }
		
		//argument = ID
		public Assignment getArgumentAssignment_3_1() { return cArgumentAssignment_3_1; }
		
		//ID
		public RuleCall getArgumentIDTerminalRuleCall_3_1_0() { return cArgumentIDTerminalRuleCall_3_1_0; }
	}
	public class ActionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ActionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cTheKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPrepositionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPrepositionPREPParserRuleCall_2_1_0 = (RuleCall)cPrepositionAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTheKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgumentAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgumentIDTerminalRuleCall_3_1_0 = (RuleCall)cArgumentAssignment_3_1.eContents().get(0);
		
		//ActionDef:
		//    name = ID (('and'|'the') ID)?  ('[' (preposition = PREP) ']')?     ('the' argument = ID)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID (('and'|'the') ID)?  ('[' (preposition = PREP) ']')?	 ('the' argument = ID)?
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(('and'|'the') ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//('and'|'the')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_0_0() { return cAndKeyword_1_0_0; }
		
		//'the'
		public Keyword getTheKeyword_1_0_1() { return cTheKeyword_1_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
		
		//('[' (preposition = PREP) ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//(preposition = PREP)
		public Assignment getPrepositionAssignment_2_1() { return cPrepositionAssignment_2_1; }
		
		//PREP
		public RuleCall getPrepositionPREPParserRuleCall_2_1_0() { return cPrepositionPREPParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//('the' argument = ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'the'
		public Keyword getTheKeyword_3_0() { return cTheKeyword_3_0; }
		
		//argument = ID
		public Assignment getArgumentAssignment_3_1() { return cArgumentAssignment_3_1; }
		
		//ID
		public RuleCall getArgumentIDTerminalRuleCall_3_1_0() { return cArgumentIDTerminalRuleCall_3_1_0; }
	}
	public class PREPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.PREP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFromKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cToKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cIntoKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cForKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cWithKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cOutKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cOffKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cUpKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cDownKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//PREP: ('on' | 'of' | 'in' | 'from' |  'to' |  'into' |'for' | 'with' | 'out' | 'off' | 'up' | 'down')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('on' | 'of' | 'in' | 'from' |  'to' |  'into' |'for' | 'with' | 'out' | 'off' | 'up' | 'down')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//'from'
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//'into'
		public Keyword getIntoKeyword_5() { return cIntoKeyword_5; }
		
		//'for'
		public Keyword getForKeyword_6() { return cForKeyword_6; }
		
		//'with'
		public Keyword getWithKeyword_7() { return cWithKeyword_7; }
		
		//'out'
		public Keyword getOutKeyword_8() { return cOutKeyword_8; }
		
		//'off'
		public Keyword getOffKeyword_9() { return cOffKeyword_9; }
		
		//'up'
		public Keyword getUpKeyword_10() { return cUpKeyword_10; }
		
		//'down'
		public Keyword getDownKeyword_11() { return cDownKeyword_11; }
	}
	public class StateDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.StateDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPostiveAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPostiveStateNameParserRuleCall_0_0 = (RuleCall)cPostiveAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNegativeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNegativeStateNameParserRuleCall_1_1_0 = (RuleCall)cNegativeAssignment_1_1.eContents().get(0);
		
		//StateDef: postive = StateName ('/' negative = StateName)?;
		@Override public ParserRule getRule() { return rule; }
		
		//postive = StateName ('/' negative = StateName)?
		public Group getGroup() { return cGroup; }
		
		//postive = StateName
		public Assignment getPostiveAssignment_0() { return cPostiveAssignment_0; }
		
		//StateName
		public RuleCall getPostiveStateNameParserRuleCall_0_0() { return cPostiveStateNameParserRuleCall_0_0; }
		
		//('/' negative = StateName)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }
		
		//negative = StateName
		public Assignment getNegativeAssignment_1_1() { return cNegativeAssignment_1_1; }
		
		//StateName
		public RuleCall getNegativeStateNameParserRuleCall_1_1_0() { return cNegativeStateNameParserRuleCall_1_1_0; }
	}
	public class StateNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.StateName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cOffKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//StateName: name = ID (('and'|'off') ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID (('and'|'off') ID)?
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(('and'|'off') ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//('and'|'off')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_0_0() { return cAndKeyword_1_0_0; }
		
		//'off'
		public Keyword getOffKeyword_1_0_1() { return cOffKeyword_1_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class PropertyDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.PropertyDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PropertyDef: name = ID (ID?);
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID (ID?)
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(ID?)
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ImperativeStateDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeStateDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPostiveAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPostiveImperativeStateNameParserRuleCall_0_0 = (RuleCall)cPostiveAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNegativeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNegativeImperativeStateNameParserRuleCall_1_1_0 = (RuleCall)cNegativeAssignment_1_1.eContents().get(0);
		
		//ImperativeStateDef: postive = ImperativeStateName ('/' negative = ImperativeStateName)?;
		@Override public ParserRule getRule() { return rule; }
		
		//postive = ImperativeStateName ('/' negative = ImperativeStateName)?
		public Group getGroup() { return cGroup; }
		
		//postive = ImperativeStateName
		public Assignment getPostiveAssignment_0() { return cPostiveAssignment_0; }
		
		//ImperativeStateName
		public RuleCall getPostiveImperativeStateNameParserRuleCall_0_0() { return cPostiveImperativeStateNameParserRuleCall_0_0; }
		
		//('/' negative = ImperativeStateName)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }
		
		//negative = ImperativeStateName
		public Assignment getNegativeAssignment_1_1() { return cNegativeAssignment_1_1; }
		
		//ImperativeStateName
		public RuleCall getNegativeImperativeStateNameParserRuleCall_1_1_0() { return cNegativeImperativeStateNameParserRuleCall_1_1_0; }
	}
	public class ImperativeStateNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeStateName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cOffKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ImperativeStateName: name = ID (('and'|'off') ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID (('and'|'off') ID)?
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(('and'|'off') ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//('and'|'off')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_0_0() { return cAndKeyword_1_0_0; }
		
		//'off'
		public Keyword getOffKeyword_1_0_1() { return cOffKeyword_1_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ImperativePropertyDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativePropertyDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ImperativePropertyDef: name = ID (ID?);
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID (ID?)
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(ID?)
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScenarioNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScenarioNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cScenarioNameAssignment_1.eContents().get(0);
		private final Keyword cGivenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPreStateEAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPreStateEDeclarativeScenarioStateParserRuleCall_3_0 = (RuleCall)cPreStateEAssignment_3.eContents().get(0);
		private final Assignment cImperative1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImperative1ImperativeScenarioParserRuleCall_4_0 = (RuleCall)cImperative1Assignment_4.eContents().get(0);
		private final Keyword cWhenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cActionEAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActionEDeclarativeScenarioActionParserRuleCall_6_0 = (RuleCall)cActionEAssignment_6.eContents().get(0);
		private final Assignment cImperative2Assignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cImperative2ImperativeScenarioParserRuleCall_7_0 = (RuleCall)cImperative2Assignment_7.eContents().get(0);
		private final Keyword cThenKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cPreStateE1Assignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPreStateE1DeclarativeScenarioStateParserRuleCall_9_0 = (RuleCall)cPreStateE1Assignment_9.eContents().get(0);
		private final Assignment cImperative3Assignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cImperative3ImperativeScenarioParserRuleCall_10_0 = (RuleCall)cImperative3Assignment_10.eContents().get(0);
		
		//Scenario:
		//       'Scenario:' scenarioName = STRING
		//       'Given' preStateE = DeclarativeScenarioState
		//       imperative1 = ImperativeScenario?
		//       'When' actionE = DeclarativeScenarioAction
		//       imperative2 = ImperativeScenario?
		//       'Then' preStateE1 = DeclarativeScenarioState
		//       imperative3 = ImperativeScenario?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Scenario:' scenarioName = STRING
		//'Given' preStateE = DeclarativeScenarioState
		//imperative1 = ImperativeScenario?
		//'When' actionE = DeclarativeScenarioAction
		//imperative2 = ImperativeScenario?
		//'Then' preStateE1 = DeclarativeScenarioState
		//imperative3 = ImperativeScenario?
		public Group getGroup() { return cGroup; }
		
		//'Scenario:'
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }
		
		//scenarioName = STRING
		public Assignment getScenarioNameAssignment_1() { return cScenarioNameAssignment_1; }
		
		//STRING
		public RuleCall getScenarioNameSTRINGTerminalRuleCall_1_0() { return cScenarioNameSTRINGTerminalRuleCall_1_0; }
		
		//'Given'
		public Keyword getGivenKeyword_2() { return cGivenKeyword_2; }
		
		//preStateE = DeclarativeScenarioState
		public Assignment getPreStateEAssignment_3() { return cPreStateEAssignment_3; }
		
		//DeclarativeScenarioState
		public RuleCall getPreStateEDeclarativeScenarioStateParserRuleCall_3_0() { return cPreStateEDeclarativeScenarioStateParserRuleCall_3_0; }
		
		//imperative1 = ImperativeScenario?
		public Assignment getImperative1Assignment_4() { return cImperative1Assignment_4; }
		
		//ImperativeScenario
		public RuleCall getImperative1ImperativeScenarioParserRuleCall_4_0() { return cImperative1ImperativeScenarioParserRuleCall_4_0; }
		
		//'When'
		public Keyword getWhenKeyword_5() { return cWhenKeyword_5; }
		
		//actionE = DeclarativeScenarioAction
		public Assignment getActionEAssignment_6() { return cActionEAssignment_6; }
		
		//DeclarativeScenarioAction
		public RuleCall getActionEDeclarativeScenarioActionParserRuleCall_6_0() { return cActionEDeclarativeScenarioActionParserRuleCall_6_0; }
		
		//imperative2 = ImperativeScenario?
		public Assignment getImperative2Assignment_7() { return cImperative2Assignment_7; }
		
		//ImperativeScenario
		public RuleCall getImperative2ImperativeScenarioParserRuleCall_7_0() { return cImperative2ImperativeScenarioParserRuleCall_7_0; }
		
		//'Then'
		public Keyword getThenKeyword_8() { return cThenKeyword_8; }
		
		//preStateE1 = DeclarativeScenarioState
		public Assignment getPreStateE1Assignment_9() { return cPreStateE1Assignment_9; }
		
		//DeclarativeScenarioState
		public RuleCall getPreStateE1DeclarativeScenarioStateParserRuleCall_9_0() { return cPreStateE1DeclarativeScenarioStateParserRuleCall_9_0; }
		
		//imperative3 = ImperativeScenario?
		public Assignment getImperative3Assignment_10() { return cImperative3Assignment_10; }
		
		//ImperativeScenario
		public RuleCall getImperative3ImperativeScenarioParserRuleCall_10_0() { return cImperative3ImperativeScenarioParserRuleCall_10_0; }
	}
	public class ImperativeScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeScenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhichKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMeansKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGivenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPreStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPreStateImperativeScenarioStateParserRuleCall_3_0 = (RuleCall)cPreStateAssignment_3.eContents().get(0);
		private final Keyword cWhenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionImperativeScenarioActionParserRuleCall_5_0 = (RuleCall)cActionAssignment_5.eContents().get(0);
		private final Keyword cThenKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPostStateAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPostStateImperativeScenarioStateParserRuleCall_7_0 = (RuleCall)cPostStateAssignment_7.eContents().get(0);
		
		//ImperativeScenario:
		//   'which' 'means'
		//   'Given' preState = ImperativeScenarioState
		//   'When' action = ImperativeScenarioAction
		//   'Then' postState = ImperativeScenarioState
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'which' 'means'
		//'Given' preState = ImperativeScenarioState
		//'When' action = ImperativeScenarioAction
		//'Then' postState = ImperativeScenarioState
		public Group getGroup() { return cGroup; }
		
		//'which'
		public Keyword getWhichKeyword_0() { return cWhichKeyword_0; }
		
		//'means'
		public Keyword getMeansKeyword_1() { return cMeansKeyword_1; }
		
		//'Given'
		public Keyword getGivenKeyword_2() { return cGivenKeyword_2; }
		
		//preState = ImperativeScenarioState
		public Assignment getPreStateAssignment_3() { return cPreStateAssignment_3; }
		
		//ImperativeScenarioState
		public RuleCall getPreStateImperativeScenarioStateParserRuleCall_3_0() { return cPreStateImperativeScenarioStateParserRuleCall_3_0; }
		
		//'When'
		public Keyword getWhenKeyword_4() { return cWhenKeyword_4; }
		
		//action = ImperativeScenarioAction
		public Assignment getActionAssignment_5() { return cActionAssignment_5; }
		
		//ImperativeScenarioAction
		public RuleCall getActionImperativeScenarioActionParserRuleCall_5_0() { return cActionImperativeScenarioActionParserRuleCall_5_0; }
		
		//'Then'
		public Keyword getThenKeyword_6() { return cThenKeyword_6; }
		
		//postState = ImperativeScenarioState
		public Assignment getPostStateAssignment_7() { return cPostStateAssignment_7; }
		
		//ImperativeScenarioState
		public RuleCall getPostStateImperativeScenarioStateParserRuleCall_7_0() { return cPostStateImperativeScenarioStateParserRuleCall_7_0; }
	}
	public class PrePostWordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.PrePostWords");
		private final Keyword cAllKeyword = (Keyword)rule.eContents().get(1);
		
		//PrePostWords:
		//    ('all')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('all')?
		public Keyword getAllKeyword() { return cAllKeyword; }
	}
	public class ToBeWordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ToBeWords");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAreKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cIsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cNotKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cAreKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cNotKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//ToBeWords:
		//    ('is'|'are'|'is' 'not'|'are' 'not')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('is'|'are'|'is' 'not'|'are' 'not')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'is'
		public Keyword getIsKeyword_0() { return cIsKeyword_0; }
		
		//'are'
		public Keyword getAreKeyword_1() { return cAreKeyword_1; }
		
		//'is' 'not'
		public Group getGroup_2() { return cGroup_2; }
		
		//'is'
		public Keyword getIsKeyword_2_0() { return cIsKeyword_2_0; }
		
		//'not'
		public Keyword getNotKeyword_2_1() { return cNotKeyword_2_1; }
		
		//'are' 'not'
		public Group getGroup_3() { return cGroup_3; }
		
		//'are'
		public Keyword getAreKeyword_3_0() { return cAreKeyword_3_0; }
		
		//'not'
		public Keyword getNotKeyword_3_1() { return cNotKeyword_3_1; }
	}
	public class DeclarativeScenarioStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeScenarioState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrePostWordsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cStatesAlternatives_1_0 = (Alternatives)cStatesAssignment_1.eContents().get(0);
		private final RuleCall cStatesDeclarativeEntityPropertyStatePhraseParserRuleCall_1_0_0 = (RuleCall)cStatesAlternatives_1_0.eContents().get(0);
		private final RuleCall cStatesDeclarativeEntityStatePhraseParserRuleCall_1_0_1 = (RuleCall)cStatesAlternatives_1_0.eContents().get(1);
		private final RuleCall cStatesDeclarativeEntityStatePhraseWithPropertyParserRuleCall_1_0_2 = (RuleCall)cStatesAlternatives_1_0.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAndKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAndStatesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAndStatesDeclarativeScenarioStateAndParserRuleCall_2_1_0 = (RuleCall)cAndStatesAssignment_2_1.eContents().get(0);
		
		//DeclarativeScenarioState:
		//    PrePostWords states += (DeclarativeEntityPropertyStatePhrase | DeclarativeEntityStatePhrase | DeclarativeEntityStatePhraseWithProperty)
		//    ('And' andStates += DeclarativeScenarioStateAnd)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrePostWords states += (DeclarativeEntityPropertyStatePhrase | DeclarativeEntityStatePhrase | DeclarativeEntityStatePhraseWithProperty)
		//('And' andStates += DeclarativeScenarioStateAnd)*
		public Group getGroup() { return cGroup; }
		
		//PrePostWords
		public RuleCall getPrePostWordsParserRuleCall_0() { return cPrePostWordsParserRuleCall_0; }
		
		//states += (DeclarativeEntityPropertyStatePhrase | DeclarativeEntityStatePhrase | DeclarativeEntityStatePhraseWithProperty)
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }
		
		//(DeclarativeEntityPropertyStatePhrase | DeclarativeEntityStatePhrase | DeclarativeEntityStatePhraseWithProperty)
		public Alternatives getStatesAlternatives_1_0() { return cStatesAlternatives_1_0; }
		
		//DeclarativeEntityPropertyStatePhrase
		public RuleCall getStatesDeclarativeEntityPropertyStatePhraseParserRuleCall_1_0_0() { return cStatesDeclarativeEntityPropertyStatePhraseParserRuleCall_1_0_0; }
		
		//DeclarativeEntityStatePhrase
		public RuleCall getStatesDeclarativeEntityStatePhraseParserRuleCall_1_0_1() { return cStatesDeclarativeEntityStatePhraseParserRuleCall_1_0_1; }
		
		//DeclarativeEntityStatePhraseWithProperty
		public RuleCall getStatesDeclarativeEntityStatePhraseWithPropertyParserRuleCall_1_0_2() { return cStatesDeclarativeEntityStatePhraseWithPropertyParserRuleCall_1_0_2; }
		
		//('And' andStates += DeclarativeScenarioStateAnd)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'And'
		public Keyword getAndKeyword_2_0() { return cAndKeyword_2_0; }
		
		//andStates += DeclarativeScenarioStateAnd
		public Assignment getAndStatesAssignment_2_1() { return cAndStatesAssignment_2_1; }
		
		//DeclarativeScenarioStateAnd
		public RuleCall getAndStatesDeclarativeScenarioStateAndParserRuleCall_2_1_0() { return cAndStatesDeclarativeScenarioStateAndParserRuleCall_2_1_0; }
	}
	public class DeclarativeScenarioStateAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeScenarioStateAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrePostWordsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cStatesAlternatives_1_0 = (Alternatives)cStatesAssignment_1.eContents().get(0);
		private final RuleCall cStatesDeclarativeEntityPropertyStatePhraseParserRuleCall_1_0_0 = (RuleCall)cStatesAlternatives_1_0.eContents().get(0);
		private final RuleCall cStatesDeclarativeEntityStatePhraseParserRuleCall_1_0_1 = (RuleCall)cStatesAlternatives_1_0.eContents().get(1);
		private final RuleCall cStatesDeclarativeEntityStatePhraseWithPropertyParserRuleCall_1_0_2 = (RuleCall)cStatesAlternatives_1_0.eContents().get(2);
		
		//DeclarativeScenarioStateAnd:
		//    PrePostWords states += (DeclarativeEntityPropertyStatePhrase | DeclarativeEntityStatePhrase | DeclarativeEntityStatePhraseWithProperty)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrePostWords states += (DeclarativeEntityPropertyStatePhrase | DeclarativeEntityStatePhrase | DeclarativeEntityStatePhraseWithProperty)
		public Group getGroup() { return cGroup; }
		
		//PrePostWords
		public RuleCall getPrePostWordsParserRuleCall_0() { return cPrePostWordsParserRuleCall_0; }
		
		//states += (DeclarativeEntityPropertyStatePhrase | DeclarativeEntityStatePhrase | DeclarativeEntityStatePhraseWithProperty)
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }
		
		//(DeclarativeEntityPropertyStatePhrase | DeclarativeEntityStatePhrase | DeclarativeEntityStatePhraseWithProperty)
		public Alternatives getStatesAlternatives_1_0() { return cStatesAlternatives_1_0; }
		
		//DeclarativeEntityPropertyStatePhrase
		public RuleCall getStatesDeclarativeEntityPropertyStatePhraseParserRuleCall_1_0_0() { return cStatesDeclarativeEntityPropertyStatePhraseParserRuleCall_1_0_0; }
		
		//DeclarativeEntityStatePhrase
		public RuleCall getStatesDeclarativeEntityStatePhraseParserRuleCall_1_0_1() { return cStatesDeclarativeEntityStatePhraseParserRuleCall_1_0_1; }
		
		//DeclarativeEntityStatePhraseWithProperty
		public RuleCall getStatesDeclarativeEntityStatePhraseWithPropertyParserRuleCall_1_0_2() { return cStatesDeclarativeEntityStatePhraseWithPropertyParserRuleCall_1_0_2; }
	}
	public class ImperativeScenarioStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeScenarioState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrePostWordsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cStatesAlternatives_1_0 = (Alternatives)cStatesAssignment_1.eContents().get(0);
		private final RuleCall cStatesImperativeEntityPropertyStatePhraseParserRuleCall_1_0_0 = (RuleCall)cStatesAlternatives_1_0.eContents().get(0);
		private final RuleCall cStatesImperativeEntityStatePhraseParserRuleCall_1_0_1 = (RuleCall)cStatesAlternatives_1_0.eContents().get(1);
		private final RuleCall cStatesImperativeEntityStatePhraseWithPropertyParserRuleCall_1_0_2 = (RuleCall)cStatesAlternatives_1_0.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAndKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAndStatesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAndStatesImperativeScenarioStateAndParserRuleCall_2_1_0 = (RuleCall)cAndStatesAssignment_2_1.eContents().get(0);
		
		//ImperativeScenarioState:
		//    PrePostWords states += (ImperativeEntityPropertyStatePhrase | ImperativeEntityStatePhrase | ImperativeEntityStatePhraseWithProperty)
		//    ('And' andStates += ImperativeScenarioStateAnd)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrePostWords states += (ImperativeEntityPropertyStatePhrase | ImperativeEntityStatePhrase | ImperativeEntityStatePhraseWithProperty)
		//('And' andStates += ImperativeScenarioStateAnd)*
		public Group getGroup() { return cGroup; }
		
		//PrePostWords
		public RuleCall getPrePostWordsParserRuleCall_0() { return cPrePostWordsParserRuleCall_0; }
		
		//states += (ImperativeEntityPropertyStatePhrase | ImperativeEntityStatePhrase | ImperativeEntityStatePhraseWithProperty)
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }
		
		//(ImperativeEntityPropertyStatePhrase | ImperativeEntityStatePhrase | ImperativeEntityStatePhraseWithProperty)
		public Alternatives getStatesAlternatives_1_0() { return cStatesAlternatives_1_0; }
		
		//ImperativeEntityPropertyStatePhrase
		public RuleCall getStatesImperativeEntityPropertyStatePhraseParserRuleCall_1_0_0() { return cStatesImperativeEntityPropertyStatePhraseParserRuleCall_1_0_0; }
		
		//ImperativeEntityStatePhrase
		public RuleCall getStatesImperativeEntityStatePhraseParserRuleCall_1_0_1() { return cStatesImperativeEntityStatePhraseParserRuleCall_1_0_1; }
		
		//ImperativeEntityStatePhraseWithProperty
		public RuleCall getStatesImperativeEntityStatePhraseWithPropertyParserRuleCall_1_0_2() { return cStatesImperativeEntityStatePhraseWithPropertyParserRuleCall_1_0_2; }
		
		//('And' andStates += ImperativeScenarioStateAnd)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'And'
		public Keyword getAndKeyword_2_0() { return cAndKeyword_2_0; }
		
		//andStates += ImperativeScenarioStateAnd
		public Assignment getAndStatesAssignment_2_1() { return cAndStatesAssignment_2_1; }
		
		//ImperativeScenarioStateAnd
		public RuleCall getAndStatesImperativeScenarioStateAndParserRuleCall_2_1_0() { return cAndStatesImperativeScenarioStateAndParserRuleCall_2_1_0; }
	}
	public class ImperativeScenarioStateAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeScenarioStateAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrePostWordsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cStatesAlternatives_1_0 = (Alternatives)cStatesAssignment_1.eContents().get(0);
		private final RuleCall cStatesImperativeEntityPropertyStatePhraseParserRuleCall_1_0_0 = (RuleCall)cStatesAlternatives_1_0.eContents().get(0);
		private final RuleCall cStatesImperativeEntityStatePhraseParserRuleCall_1_0_1 = (RuleCall)cStatesAlternatives_1_0.eContents().get(1);
		private final RuleCall cStatesImperativeEntityStatePhraseWithPropertyParserRuleCall_1_0_2 = (RuleCall)cStatesAlternatives_1_0.eContents().get(2);
		
		//ImperativeScenarioStateAnd:
		//    PrePostWords states += (ImperativeEntityPropertyStatePhrase | ImperativeEntityStatePhrase | ImperativeEntityStatePhraseWithProperty)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrePostWords states += (ImperativeEntityPropertyStatePhrase | ImperativeEntityStatePhrase | ImperativeEntityStatePhraseWithProperty)
		public Group getGroup() { return cGroup; }
		
		//PrePostWords
		public RuleCall getPrePostWordsParserRuleCall_0() { return cPrePostWordsParserRuleCall_0; }
		
		//states += (ImperativeEntityPropertyStatePhrase | ImperativeEntityStatePhrase | ImperativeEntityStatePhraseWithProperty)
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }
		
		//(ImperativeEntityPropertyStatePhrase | ImperativeEntityStatePhrase | ImperativeEntityStatePhraseWithProperty)
		public Alternatives getStatesAlternatives_1_0() { return cStatesAlternatives_1_0; }
		
		//ImperativeEntityPropertyStatePhrase
		public RuleCall getStatesImperativeEntityPropertyStatePhraseParserRuleCall_1_0_0() { return cStatesImperativeEntityPropertyStatePhraseParserRuleCall_1_0_0; }
		
		//ImperativeEntityStatePhrase
		public RuleCall getStatesImperativeEntityStatePhraseParserRuleCall_1_0_1() { return cStatesImperativeEntityStatePhraseParserRuleCall_1_0_1; }
		
		//ImperativeEntityStatePhraseWithProperty
		public RuleCall getStatesImperativeEntityStatePhraseWithPropertyParserRuleCall_1_0_2() { return cStatesImperativeEntityStatePhraseWithPropertyParserRuleCall_1_0_2; }
	}
	public class DeclarativeScenarioActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeScenarioAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cActionsAlternatives_0_0 = (Alternatives)cActionsAssignment_0.eContents().get(0);
		private final RuleCall cActionsDeclarativeEntityActionParserRuleCall_0_0_0 = (RuleCall)cActionsAlternatives_0_0.eContents().get(0);
		private final RuleCall cActionsVerbActionParserRuleCall_0_0_1 = (RuleCall)cActionsAlternatives_0_0.eContents().get(1);
		private final RuleCall cActionsDeclarativeEntityPropertyActionParserRuleCall_0_0_2 = (RuleCall)cActionsAlternatives_0_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAndActionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAndActionsDeclarativeScenarioActionAndParserRuleCall_1_1_0 = (RuleCall)cAndActionsAssignment_1_1.eContents().get(0);
		
		//DeclarativeScenarioAction:
		//    actions += (DeclarativeEntityAction | VerbAction | DeclarativeEntityPropertyAction)
		//    ('And' andActions += DeclarativeScenarioActionAnd)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//actions += (DeclarativeEntityAction | VerbAction | DeclarativeEntityPropertyAction)
		//('And' andActions += DeclarativeScenarioActionAnd)*
		public Group getGroup() { return cGroup; }
		
		//actions += (DeclarativeEntityAction | VerbAction | DeclarativeEntityPropertyAction)
		public Assignment getActionsAssignment_0() { return cActionsAssignment_0; }
		
		//(DeclarativeEntityAction | VerbAction | DeclarativeEntityPropertyAction)
		public Alternatives getActionsAlternatives_0_0() { return cActionsAlternatives_0_0; }
		
		//DeclarativeEntityAction
		public RuleCall getActionsDeclarativeEntityActionParserRuleCall_0_0_0() { return cActionsDeclarativeEntityActionParserRuleCall_0_0_0; }
		
		//VerbAction
		public RuleCall getActionsVerbActionParserRuleCall_0_0_1() { return cActionsVerbActionParserRuleCall_0_0_1; }
		
		//DeclarativeEntityPropertyAction
		public RuleCall getActionsDeclarativeEntityPropertyActionParserRuleCall_0_0_2() { return cActionsDeclarativeEntityPropertyActionParserRuleCall_0_0_2; }
		
		//('And' andActions += DeclarativeScenarioActionAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'And'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//andActions += DeclarativeScenarioActionAnd
		public Assignment getAndActionsAssignment_1_1() { return cAndActionsAssignment_1_1; }
		
		//DeclarativeScenarioActionAnd
		public RuleCall getAndActionsDeclarativeScenarioActionAndParserRuleCall_1_1_0() { return cAndActionsDeclarativeScenarioActionAndParserRuleCall_1_1_0; }
	}
	public class DeclarativeScenarioActionAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeScenarioActionAnd");
		private final Assignment cActionsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cActionsAlternatives_0 = (Alternatives)cActionsAssignment.eContents().get(0);
		private final RuleCall cActionsDeclarativeEntityActionParserRuleCall_0_0 = (RuleCall)cActionsAlternatives_0.eContents().get(0);
		private final RuleCall cActionsVerbActionParserRuleCall_0_1 = (RuleCall)cActionsAlternatives_0.eContents().get(1);
		private final RuleCall cActionsDeclarativeEntityPropertyActionParserRuleCall_0_2 = (RuleCall)cActionsAlternatives_0.eContents().get(2);
		
		//DeclarativeScenarioActionAnd:
		//    actions += (DeclarativeEntityAction | VerbAction | DeclarativeEntityPropertyAction)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//actions += (DeclarativeEntityAction | VerbAction | DeclarativeEntityPropertyAction)
		public Assignment getActionsAssignment() { return cActionsAssignment; }
		
		//(DeclarativeEntityAction | VerbAction | DeclarativeEntityPropertyAction)
		public Alternatives getActionsAlternatives_0() { return cActionsAlternatives_0; }
		
		//DeclarativeEntityAction
		public RuleCall getActionsDeclarativeEntityActionParserRuleCall_0_0() { return cActionsDeclarativeEntityActionParserRuleCall_0_0; }
		
		//VerbAction
		public RuleCall getActionsVerbActionParserRuleCall_0_1() { return cActionsVerbActionParserRuleCall_0_1; }
		
		//DeclarativeEntityPropertyAction
		public RuleCall getActionsDeclarativeEntityPropertyActionParserRuleCall_0_2() { return cActionsDeclarativeEntityPropertyActionParserRuleCall_0_2; }
	}
	public class ImperativeScenarioActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeScenarioAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cActionsAlternatives_0_0 = (Alternatives)cActionsAssignment_0.eContents().get(0);
		private final RuleCall cActionsImperativeEntityActionParserRuleCall_0_0_0 = (RuleCall)cActionsAlternatives_0_0.eContents().get(0);
		private final RuleCall cActionsImperativeVerbActionParserRuleCall_0_0_1 = (RuleCall)cActionsAlternatives_0_0.eContents().get(1);
		private final RuleCall cActionsImperativeEntityPropertyActionParserRuleCall_0_0_2 = (RuleCall)cActionsAlternatives_0_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAndActionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAndActionsImperativeScenarioActionAndParserRuleCall_1_1_0 = (RuleCall)cAndActionsAssignment_1_1.eContents().get(0);
		
		//ImperativeScenarioAction:
		//    actions += (ImperativeEntityAction | ImperativeVerbAction | ImperativeEntityPropertyAction)
		//    ('And' andActions += ImperativeScenarioActionAnd)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//actions += (ImperativeEntityAction | ImperativeVerbAction | ImperativeEntityPropertyAction)
		//('And' andActions += ImperativeScenarioActionAnd)*
		public Group getGroup() { return cGroup; }
		
		//actions += (ImperativeEntityAction | ImperativeVerbAction | ImperativeEntityPropertyAction)
		public Assignment getActionsAssignment_0() { return cActionsAssignment_0; }
		
		//(ImperativeEntityAction | ImperativeVerbAction | ImperativeEntityPropertyAction)
		public Alternatives getActionsAlternatives_0_0() { return cActionsAlternatives_0_0; }
		
		//ImperativeEntityAction
		public RuleCall getActionsImperativeEntityActionParserRuleCall_0_0_0() { return cActionsImperativeEntityActionParserRuleCall_0_0_0; }
		
		//ImperativeVerbAction
		public RuleCall getActionsImperativeVerbActionParserRuleCall_0_0_1() { return cActionsImperativeVerbActionParserRuleCall_0_0_1; }
		
		//ImperativeEntityPropertyAction
		public RuleCall getActionsImperativeEntityPropertyActionParserRuleCall_0_0_2() { return cActionsImperativeEntityPropertyActionParserRuleCall_0_0_2; }
		
		//('And' andActions += ImperativeScenarioActionAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'And'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//andActions += ImperativeScenarioActionAnd
		public Assignment getAndActionsAssignment_1_1() { return cAndActionsAssignment_1_1; }
		
		//ImperativeScenarioActionAnd
		public RuleCall getAndActionsImperativeScenarioActionAndParserRuleCall_1_1_0() { return cAndActionsImperativeScenarioActionAndParserRuleCall_1_1_0; }
	}
	public class ImperativeScenarioActionAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeScenarioActionAnd");
		private final Assignment cActionsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cActionsAlternatives_0 = (Alternatives)cActionsAssignment.eContents().get(0);
		private final RuleCall cActionsImperativeEntityActionParserRuleCall_0_0 = (RuleCall)cActionsAlternatives_0.eContents().get(0);
		private final RuleCall cActionsImperativeVerbActionParserRuleCall_0_1 = (RuleCall)cActionsAlternatives_0.eContents().get(1);
		private final RuleCall cActionsImperativeEntityPropertyActionParserRuleCall_0_2 = (RuleCall)cActionsAlternatives_0.eContents().get(2);
		
		//ImperativeScenarioActionAnd:
		//    actions += (ImperativeEntityAction | ImperativeVerbAction | ImperativeEntityPropertyAction)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//actions += (ImperativeEntityAction | ImperativeVerbAction | ImperativeEntityPropertyAction)
		public Assignment getActionsAssignment() { return cActionsAssignment; }
		
		//(ImperativeEntityAction | ImperativeVerbAction | ImperativeEntityPropertyAction)
		public Alternatives getActionsAlternatives_0() { return cActionsAlternatives_0; }
		
		//ImperativeEntityAction
		public RuleCall getActionsImperativeEntityActionParserRuleCall_0_0() { return cActionsImperativeEntityActionParserRuleCall_0_0; }
		
		//ImperativeVerbAction
		public RuleCall getActionsImperativeVerbActionParserRuleCall_0_1() { return cActionsImperativeVerbActionParserRuleCall_0_1; }
		
		//ImperativeEntityPropertyAction
		public RuleCall getActionsImperativeEntityPropertyActionParserRuleCall_0_2() { return cActionsImperativeEntityPropertyActionParserRuleCall_0_2; }
	}
	public class ENTITY_IDENTITYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ENTITY_IDENTITY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ENTITY_IDENTITY: (('#' INT) | STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//(('#' INT) | STRING)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('#' INT)
		public Group getGroup_0() { return cGroup_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_0_0() { return cNumberSignKeyword_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class ADVERBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ADVERB");
		private final Keyword cLinearlyKeyword = (Keyword)rule.eContents().get(1);
		
		//ADVERB: ('linearly');
		@Override public ParserRule getRule() { return rule; }
		
		//('linearly')
		public Keyword getLinearlyKeyword() { return cLinearlyKeyword; }
	}
	public class DeclarativeEntityRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeEntityRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntityDeclarativeEntityDefCrossReference_1_0 = (CrossReference)cEntityAssignment_1.eContents().get(0);
		private final RuleCall cEntityDeclarativeEntityDefIDTerminalRuleCall_1_0_1 = (RuleCall)cEntityDeclarativeEntityDefCrossReference_1_0.eContents().get(1);
		private final Assignment cEntityValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntityValueENTITY_IDENTITYParserRuleCall_2_0 = (RuleCall)cEntityValueAssignment_2.eContents().get(0);
		
		//DeclarativeEntityRef:
		//    'the' entity = [DeclarativeEntityDef] (entityValue = ENTITY_IDENTITY)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'the' entity = [DeclarativeEntityDef] (entityValue = ENTITY_IDENTITY)?
		public Group getGroup() { return cGroup; }
		
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//entity = [DeclarativeEntityDef]
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }
		
		//[DeclarativeEntityDef]
		public CrossReference getEntityDeclarativeEntityDefCrossReference_1_0() { return cEntityDeclarativeEntityDefCrossReference_1_0; }
		
		//ID
		public RuleCall getEntityDeclarativeEntityDefIDTerminalRuleCall_1_0_1() { return cEntityDeclarativeEntityDefIDTerminalRuleCall_1_0_1; }
		
		//(entityValue = ENTITY_IDENTITY)?
		public Assignment getEntityValueAssignment_2() { return cEntityValueAssignment_2; }
		
		//ENTITY_IDENTITY
		public RuleCall getEntityValueENTITY_IDENTITYParserRuleCall_2_0() { return cEntityValueENTITY_IDENTITYParserRuleCall_2_0; }
	}
	public class ImperativeEntityRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeEntityRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntityImperativeEntityDefCrossReference_1_0 = (CrossReference)cEntityAssignment_1.eContents().get(0);
		private final RuleCall cEntityImperativeEntityDefIDTerminalRuleCall_1_0_1 = (RuleCall)cEntityImperativeEntityDefCrossReference_1_0.eContents().get(1);
		private final Assignment cEntityValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntityValueENTITY_IDENTITYParserRuleCall_2_0 = (RuleCall)cEntityValueAssignment_2.eContents().get(0);
		
		//ImperativeEntityRef:
		//    'the' entity = [ImperativeEntityDef] (entityValue = ENTITY_IDENTITY)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'the' entity = [ImperativeEntityDef] (entityValue = ENTITY_IDENTITY)?
		public Group getGroup() { return cGroup; }
		
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//entity = [ImperativeEntityDef]
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }
		
		//[ImperativeEntityDef]
		public CrossReference getEntityImperativeEntityDefCrossReference_1_0() { return cEntityImperativeEntityDefCrossReference_1_0; }
		
		//ID
		public RuleCall getEntityImperativeEntityDefIDTerminalRuleCall_1_0_1() { return cEntityImperativeEntityDefIDTerminalRuleCall_1_0_1; }
		
		//(entityValue = ENTITY_IDENTITY)?
		public Assignment getEntityValueAssignment_2() { return cEntityValueAssignment_2; }
		
		//ENTITY_IDENTITY
		public RuleCall getEntityValueENTITY_IDENTITYParserRuleCall_2_0() { return cEntityValueENTITY_IDENTITYParserRuleCall_2_0; }
	}
	public class ActionRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ActionRef");
		private final Assignment cActionAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cActionActionDefCrossReference_0 = (CrossReference)cActionAssignment.eContents().get(0);
		private final RuleCall cActionActionDefIDTerminalRuleCall_0_1 = (RuleCall)cActionActionDefCrossReference_0.eContents().get(1);
		
		//ActionRef:
		//    action = [ActionDef]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//action = [ActionDef]
		public Assignment getActionAssignment() { return cActionAssignment; }
		
		//[ActionDef]
		public CrossReference getActionActionDefCrossReference_0() { return cActionActionDefCrossReference_0; }
		
		//ID
		public RuleCall getActionActionDefIDTerminalRuleCall_0_1() { return cActionActionDefIDTerminalRuleCall_0_1; }
	}
	public class ImperativeActionRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeActionRef");
		private final Assignment cActionAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cActionImperativeActionDefCrossReference_0 = (CrossReference)cActionAssignment.eContents().get(0);
		private final RuleCall cActionImperativeActionDefIDTerminalRuleCall_0_1 = (RuleCall)cActionImperativeActionDefCrossReference_0.eContents().get(1);
		
		//ImperativeActionRef:
		//    action = [ImperativeActionDef]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//action = [ImperativeActionDef]
		public Assignment getActionAssignment() { return cActionAssignment; }
		
		//[ImperativeActionDef]
		public CrossReference getActionImperativeActionDefCrossReference_0() { return cActionImperativeActionDefCrossReference_0; }
		
		//ID
		public RuleCall getActionImperativeActionDefIDTerminalRuleCall_0_1() { return cActionImperativeActionDefIDTerminalRuleCall_0_1; }
	}
	public class PropertyRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.PropertyRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPropertyPropertyDefCrossReference_1_0 = (CrossReference)cPropertyAssignment_1.eContents().get(0);
		private final RuleCall cPropertyPropertyDefIDTerminalRuleCall_1_0_1 = (RuleCall)cPropertyPropertyDefCrossReference_1_0.eContents().get(1);
		private final Assignment cPropertyValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyValueENTITY_IDENTITYParserRuleCall_2_0 = (RuleCall)cPropertyValueAssignment_2.eContents().get(0);
		
		//PropertyRef:
		//    'the' property = [PropertyDef] (propertyValue = ENTITY_IDENTITY)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'the' property = [PropertyDef] (propertyValue = ENTITY_IDENTITY)?
		public Group getGroup() { return cGroup; }
		
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//property = [PropertyDef]
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//[PropertyDef]
		public CrossReference getPropertyPropertyDefCrossReference_1_0() { return cPropertyPropertyDefCrossReference_1_0; }
		
		//ID
		public RuleCall getPropertyPropertyDefIDTerminalRuleCall_1_0_1() { return cPropertyPropertyDefIDTerminalRuleCall_1_0_1; }
		
		//(propertyValue = ENTITY_IDENTITY)?
		public Assignment getPropertyValueAssignment_2() { return cPropertyValueAssignment_2; }
		
		//ENTITY_IDENTITY
		public RuleCall getPropertyValueENTITY_IDENTITYParserRuleCall_2_0() { return cPropertyValueENTITY_IDENTITYParserRuleCall_2_0; }
	}
	public class ImperativePropertyRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativePropertyRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPropertyImperativePropertyDefCrossReference_1_0 = (CrossReference)cPropertyAssignment_1.eContents().get(0);
		private final RuleCall cPropertyImperativePropertyDefIDTerminalRuleCall_1_0_1 = (RuleCall)cPropertyImperativePropertyDefCrossReference_1_0.eContents().get(1);
		private final Assignment cPropertyValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyValueENTITY_IDENTITYParserRuleCall_2_0 = (RuleCall)cPropertyValueAssignment_2.eContents().get(0);
		
		//ImperativePropertyRef:
		//    'the' property = [ImperativePropertyDef] (propertyValue = ENTITY_IDENTITY)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'the' property = [ImperativePropertyDef] (propertyValue = ENTITY_IDENTITY)?
		public Group getGroup() { return cGroup; }
		
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//property = [ImperativePropertyDef]
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//[ImperativePropertyDef]
		public CrossReference getPropertyImperativePropertyDefCrossReference_1_0() { return cPropertyImperativePropertyDefCrossReference_1_0; }
		
		//ID
		public RuleCall getPropertyImperativePropertyDefIDTerminalRuleCall_1_0_1() { return cPropertyImperativePropertyDefIDTerminalRuleCall_1_0_1; }
		
		//(propertyValue = ENTITY_IDENTITY)?
		public Assignment getPropertyValueAssignment_2() { return cPropertyValueAssignment_2; }
		
		//ENTITY_IDENTITY
		public RuleCall getPropertyValueENTITY_IDENTITYParserRuleCall_2_0() { return cPropertyValueENTITY_IDENTITYParserRuleCall_2_0; }
	}
	public class DeclarativeEntityOrPropertyRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeEntityOrPropertyRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarativeEntityRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPropertyAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cPropertyPropertyDefCrossReference_1_0_0 = (CrossReference)cPropertyAssignment_1_0.eContents().get(0);
		private final RuleCall cPropertyPropertyDefIDTerminalRuleCall_1_0_0_1 = (RuleCall)cPropertyPropertyDefCrossReference_1_0_0.eContents().get(1);
		private final Assignment cPropertyValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertyValueENTITY_IDENTITYParserRuleCall_1_1_0 = (RuleCall)cPropertyValueAssignment_1_1.eContents().get(0);
		
		//DeclarativeEntityOrPropertyRef:
		//    DeclarativeEntityRef | (property = [PropertyDef] (propertyValue = ENTITY_IDENTITY)?)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//DeclarativeEntityRef | (property = [PropertyDef] (propertyValue = ENTITY_IDENTITY)?)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DeclarativeEntityRef
		public RuleCall getDeclarativeEntityRefParserRuleCall_0() { return cDeclarativeEntityRefParserRuleCall_0; }
		
		//(property = [PropertyDef] (propertyValue = ENTITY_IDENTITY)?)
		public Group getGroup_1() { return cGroup_1; }
		
		//property = [PropertyDef]
		public Assignment getPropertyAssignment_1_0() { return cPropertyAssignment_1_0; }
		
		//[PropertyDef]
		public CrossReference getPropertyPropertyDefCrossReference_1_0_0() { return cPropertyPropertyDefCrossReference_1_0_0; }
		
		//ID
		public RuleCall getPropertyPropertyDefIDTerminalRuleCall_1_0_0_1() { return cPropertyPropertyDefIDTerminalRuleCall_1_0_0_1; }
		
		//(propertyValue = ENTITY_IDENTITY)?
		public Assignment getPropertyValueAssignment_1_1() { return cPropertyValueAssignment_1_1; }
		
		//ENTITY_IDENTITY
		public RuleCall getPropertyValueENTITY_IDENTITYParserRuleCall_1_1_0() { return cPropertyValueENTITY_IDENTITYParserRuleCall_1_1_0; }
	}
	public class DeclarativeEntityStatePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeEntityStatePhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntityDeclarativeEntityRefParserRuleCall_0_0 = (RuleCall)cEntityAssignment_0.eContents().get(0);
		private final RuleCall cToBeWordsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateStateNameCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateStateNameIDTerminalRuleCall_2_0_1 = (RuleCall)cStateStateNameCrossReference_2_0.eContents().get(1);
		
		//DeclarativeEntityStatePhrase:
		//    entity = DeclarativeEntityRef ToBeWords state = [StateName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entity = DeclarativeEntityRef ToBeWords state = [StateName]
		public Group getGroup() { return cGroup; }
		
		//entity = DeclarativeEntityRef
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }
		
		//DeclarativeEntityRef
		public RuleCall getEntityDeclarativeEntityRefParserRuleCall_0_0() { return cEntityDeclarativeEntityRefParserRuleCall_0_0; }
		
		//ToBeWords
		public RuleCall getToBeWordsParserRuleCall_1() { return cToBeWordsParserRuleCall_1; }
		
		//state = [StateName]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//[StateName]
		public CrossReference getStateStateNameCrossReference_2_0() { return cStateStateNameCrossReference_2_0; }
		
		//ID
		public RuleCall getStateStateNameIDTerminalRuleCall_2_0_1() { return cStateStateNameIDTerminalRuleCall_2_0_1; }
	}
	public class DeclarativeEntityStatePhraseWithPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeEntityStatePhraseWithProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntityDeclarativeEntityRefParserRuleCall_0_0 = (RuleCall)cEntityAssignment_0.eContents().get(0);
		private final RuleCall cToBeWordsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateStateNameCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateStateNameIDTerminalRuleCall_2_0_1 = (RuleCall)cStateStateNameCrossReference_2_0.eContents().get(1);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertyPropertyRefParserRuleCall_4_0 = (RuleCall)cPropertyAssignment_4.eContents().get(0);
		
		//DeclarativeEntityStatePhraseWithProperty:
		//    entity = DeclarativeEntityRef ToBeWords state = [StateName] 'with' property = PropertyRef
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entity = DeclarativeEntityRef ToBeWords state = [StateName] 'with' property = PropertyRef
		public Group getGroup() { return cGroup; }
		
		//entity = DeclarativeEntityRef
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }
		
		//DeclarativeEntityRef
		public RuleCall getEntityDeclarativeEntityRefParserRuleCall_0_0() { return cEntityDeclarativeEntityRefParserRuleCall_0_0; }
		
		//ToBeWords
		public RuleCall getToBeWordsParserRuleCall_1() { return cToBeWordsParserRuleCall_1; }
		
		//state = [StateName]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//[StateName]
		public CrossReference getStateStateNameCrossReference_2_0() { return cStateStateNameCrossReference_2_0; }
		
		//ID
		public RuleCall getStateStateNameIDTerminalRuleCall_2_0_1() { return cStateStateNameIDTerminalRuleCall_2_0_1; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//property = PropertyRef
		public Assignment getPropertyAssignment_4() { return cPropertyAssignment_4; }
		
		//PropertyRef
		public RuleCall getPropertyPropertyRefParserRuleCall_4_0() { return cPropertyPropertyRefParserRuleCall_4_0; }
	}
	public class ImperativeEntityStatePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeEntityStatePhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntityImperativeEntityRefParserRuleCall_0_0 = (RuleCall)cEntityAssignment_0.eContents().get(0);
		private final RuleCall cToBeWordsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateImperativeStateNameCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateImperativeStateNameIDTerminalRuleCall_2_0_1 = (RuleCall)cStateImperativeStateNameCrossReference_2_0.eContents().get(1);
		
		//ImperativeEntityStatePhrase:
		//    entity = ImperativeEntityRef ToBeWords state = [ImperativeStateName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entity = ImperativeEntityRef ToBeWords state = [ImperativeStateName]
		public Group getGroup() { return cGroup; }
		
		//entity = ImperativeEntityRef
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }
		
		//ImperativeEntityRef
		public RuleCall getEntityImperativeEntityRefParserRuleCall_0_0() { return cEntityImperativeEntityRefParserRuleCall_0_0; }
		
		//ToBeWords
		public RuleCall getToBeWordsParserRuleCall_1() { return cToBeWordsParserRuleCall_1; }
		
		//state = [ImperativeStateName]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//[ImperativeStateName]
		public CrossReference getStateImperativeStateNameCrossReference_2_0() { return cStateImperativeStateNameCrossReference_2_0; }
		
		//ID
		public RuleCall getStateImperativeStateNameIDTerminalRuleCall_2_0_1() { return cStateImperativeStateNameIDTerminalRuleCall_2_0_1; }
	}
	public class ImperativeEntityStatePhraseWithPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeEntityStatePhraseWithProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntityImperativeEntityRefParserRuleCall_0_0 = (RuleCall)cEntityAssignment_0.eContents().get(0);
		private final RuleCall cToBeWordsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateImperativeStateNameCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateImperativeStateNameIDTerminalRuleCall_2_0_1 = (RuleCall)cStateImperativeStateNameCrossReference_2_0.eContents().get(1);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertyImperativePropertyRefParserRuleCall_4_0 = (RuleCall)cPropertyAssignment_4.eContents().get(0);
		
		//ImperativeEntityStatePhraseWithProperty:
		//    entity = ImperativeEntityRef ToBeWords state = [ImperativeStateName] 'with' property = ImperativePropertyRef
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entity = ImperativeEntityRef ToBeWords state = [ImperativeStateName] 'with' property = ImperativePropertyRef
		public Group getGroup() { return cGroup; }
		
		//entity = ImperativeEntityRef
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }
		
		//ImperativeEntityRef
		public RuleCall getEntityImperativeEntityRefParserRuleCall_0_0() { return cEntityImperativeEntityRefParserRuleCall_0_0; }
		
		//ToBeWords
		public RuleCall getToBeWordsParserRuleCall_1() { return cToBeWordsParserRuleCall_1; }
		
		//state = [ImperativeStateName]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//[ImperativeStateName]
		public CrossReference getStateImperativeStateNameCrossReference_2_0() { return cStateImperativeStateNameCrossReference_2_0; }
		
		//ID
		public RuleCall getStateImperativeStateNameIDTerminalRuleCall_2_0_1() { return cStateImperativeStateNameIDTerminalRuleCall_2_0_1; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//property = ImperativePropertyRef
		public Assignment getPropertyAssignment_4() { return cPropertyAssignment_4; }
		
		//ImperativePropertyRef
		public RuleCall getPropertyImperativePropertyRefParserRuleCall_4_0() { return cPropertyImperativePropertyRefParserRuleCall_4_0; }
	}
	public class DeclarativeEntityPropertyStatePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeEntityPropertyStatePhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyPropertyRefParserRuleCall_0_0 = (RuleCall)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cPrepositionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrepositionPREPParserRuleCall_1_0 = (RuleCall)cPrepositionAssignment_1.eContents().get(0);
		private final Assignment cEntityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntityDeclarativeEntityRefParserRuleCall_2_0 = (RuleCall)cEntityAssignment_2.eContents().get(0);
		private final Assignment cToBeWordAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToBeWordToBeWordsParserRuleCall_3_0 = (RuleCall)cToBeWordAssignment_3.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueENTITY_IDENTITYParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//DeclarativeEntityPropertyStatePhrase:
		//    property = PropertyRef? preposition = PREP  entity = DeclarativeEntityRef
		//    toBeWord = ToBeWords value = ENTITY_IDENTITY
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//property = PropertyRef? preposition = PREP  entity = DeclarativeEntityRef
		//toBeWord = ToBeWords value = ENTITY_IDENTITY
		public Group getGroup() { return cGroup; }
		
		//property = PropertyRef?
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//PropertyRef
		public RuleCall getPropertyPropertyRefParserRuleCall_0_0() { return cPropertyPropertyRefParserRuleCall_0_0; }
		
		//preposition = PREP
		public Assignment getPrepositionAssignment_1() { return cPrepositionAssignment_1; }
		
		//PREP
		public RuleCall getPrepositionPREPParserRuleCall_1_0() { return cPrepositionPREPParserRuleCall_1_0; }
		
		//entity = DeclarativeEntityRef
		public Assignment getEntityAssignment_2() { return cEntityAssignment_2; }
		
		//DeclarativeEntityRef
		public RuleCall getEntityDeclarativeEntityRefParserRuleCall_2_0() { return cEntityDeclarativeEntityRefParserRuleCall_2_0; }
		
		//toBeWord = ToBeWords
		public Assignment getToBeWordAssignment_3() { return cToBeWordAssignment_3; }
		
		//ToBeWords
		public RuleCall getToBeWordToBeWordsParserRuleCall_3_0() { return cToBeWordToBeWordsParserRuleCall_3_0; }
		
		//value = ENTITY_IDENTITY
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//ENTITY_IDENTITY
		public RuleCall getValueENTITY_IDENTITYParserRuleCall_4_0() { return cValueENTITY_IDENTITYParserRuleCall_4_0; }
	}
	public class ImperativeEntityPropertyStatePhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeEntityPropertyStatePhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyImperativePropertyRefParserRuleCall_0_0 = (RuleCall)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cPrepositionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrepositionPREPParserRuleCall_1_0 = (RuleCall)cPrepositionAssignment_1.eContents().get(0);
		private final Assignment cEntityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntityImperativeEntityRefParserRuleCall_2_0 = (RuleCall)cEntityAssignment_2.eContents().get(0);
		private final Assignment cToBeWordAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToBeWordToBeWordsParserRuleCall_3_0 = (RuleCall)cToBeWordAssignment_3.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueENTITY_IDENTITYParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//ImperativeEntityPropertyStatePhrase:
		//     property = ImperativePropertyRef? preposition = PREP  entity = ImperativeEntityRef
		//     toBeWord = ToBeWords value = ENTITY_IDENTITY
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//property = ImperativePropertyRef? preposition = PREP  entity = ImperativeEntityRef
		//toBeWord = ToBeWords value = ENTITY_IDENTITY
		public Group getGroup() { return cGroup; }
		
		//property = ImperativePropertyRef?
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//ImperativePropertyRef
		public RuleCall getPropertyImperativePropertyRefParserRuleCall_0_0() { return cPropertyImperativePropertyRefParserRuleCall_0_0; }
		
		//preposition = PREP
		public Assignment getPrepositionAssignment_1() { return cPrepositionAssignment_1; }
		
		//PREP
		public RuleCall getPrepositionPREPParserRuleCall_1_0() { return cPrepositionPREPParserRuleCall_1_0; }
		
		//entity = ImperativeEntityRef
		public Assignment getEntityAssignment_2() { return cEntityAssignment_2; }
		
		//ImperativeEntityRef
		public RuleCall getEntityImperativeEntityRefParserRuleCall_2_0() { return cEntityImperativeEntityRefParserRuleCall_2_0; }
		
		//toBeWord = ToBeWords
		public Assignment getToBeWordAssignment_3() { return cToBeWordAssignment_3; }
		
		//ToBeWords
		public RuleCall getToBeWordToBeWordsParserRuleCall_3_0() { return cToBeWordToBeWordsParserRuleCall_3_0; }
		
		//value = ENTITY_IDENTITY
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//ENTITY_IDENTITY
		public RuleCall getValueENTITY_IDENTITYParserRuleCall_4_0() { return cValueENTITY_IDENTITYParserRuleCall_4_0; }
	}
	public class VerbActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.VerbAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionActionRefParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Assignment cPrepositionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrepositionPREPParserRuleCall_1_0 = (RuleCall)cPrepositionAssignment_1.eContents().get(0);
		private final Assignment cEntityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntityDeclarativeEntityRefParserRuleCall_2_0 = (RuleCall)cEntityAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cPreposition2Assignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPreposition2PREPParserRuleCall_3_0_0 = (RuleCall)cPreposition2Assignment_3_0.eContents().get(0);
		private final Assignment cEntity2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEntity2DeclarativeEntityRefParserRuleCall_3_1_0 = (RuleCall)cEntity2Assignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cPreposition3Assignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cPreposition3PREPParserRuleCall_4_0_0 = (RuleCall)cPreposition3Assignment_4_0.eContents().get(0);
		private final Assignment cEntity3Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEntity3DeclarativeEntityRefParserRuleCall_4_1_0 = (RuleCall)cEntity3Assignment_4_1.eContents().get(0);
		
		//VerbAction:
		//    action = ActionRef preposition = PREP (entity = DeclarativeEntityRef)? (preposition2 = PREP entity2 = DeclarativeEntityRef)? (preposition3 = PREP entity3 = DeclarativeEntityRef)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//action = ActionRef preposition = PREP (entity = DeclarativeEntityRef)? (preposition2 = PREP entity2 = DeclarativeEntityRef)? (preposition3 = PREP entity3 = DeclarativeEntityRef)?
		public Group getGroup() { return cGroup; }
		
		//action = ActionRef
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//ActionRef
		public RuleCall getActionActionRefParserRuleCall_0_0() { return cActionActionRefParserRuleCall_0_0; }
		
		//preposition = PREP
		public Assignment getPrepositionAssignment_1() { return cPrepositionAssignment_1; }
		
		//PREP
		public RuleCall getPrepositionPREPParserRuleCall_1_0() { return cPrepositionPREPParserRuleCall_1_0; }
		
		//(entity = DeclarativeEntityRef)?
		public Assignment getEntityAssignment_2() { return cEntityAssignment_2; }
		
		//DeclarativeEntityRef
		public RuleCall getEntityDeclarativeEntityRefParserRuleCall_2_0() { return cEntityDeclarativeEntityRefParserRuleCall_2_0; }
		
		//(preposition2 = PREP entity2 = DeclarativeEntityRef)?
		public Group getGroup_3() { return cGroup_3; }
		
		//preposition2 = PREP
		public Assignment getPreposition2Assignment_3_0() { return cPreposition2Assignment_3_0; }
		
		//PREP
		public RuleCall getPreposition2PREPParserRuleCall_3_0_0() { return cPreposition2PREPParserRuleCall_3_0_0; }
		
		//entity2 = DeclarativeEntityRef
		public Assignment getEntity2Assignment_3_1() { return cEntity2Assignment_3_1; }
		
		//DeclarativeEntityRef
		public RuleCall getEntity2DeclarativeEntityRefParserRuleCall_3_1_0() { return cEntity2DeclarativeEntityRefParserRuleCall_3_1_0; }
		
		//(preposition3 = PREP entity3 = DeclarativeEntityRef)?
		public Group getGroup_4() { return cGroup_4; }
		
		//preposition3 = PREP
		public Assignment getPreposition3Assignment_4_0() { return cPreposition3Assignment_4_0; }
		
		//PREP
		public RuleCall getPreposition3PREPParserRuleCall_4_0_0() { return cPreposition3PREPParserRuleCall_4_0_0; }
		
		//entity3 = DeclarativeEntityRef
		public Assignment getEntity3Assignment_4_1() { return cEntity3Assignment_4_1; }
		
		//DeclarativeEntityRef
		public RuleCall getEntity3DeclarativeEntityRefParserRuleCall_4_1_0() { return cEntity3DeclarativeEntityRefParserRuleCall_4_1_0; }
	}
	public class DeclarativeEntityActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeEntityAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntityDeclarativeEntityRefParserRuleCall_0_0 = (RuleCall)cEntityAssignment_0.eContents().get(0);
		private final Assignment cActionRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionRefActionRefParserRuleCall_1_0 = (RuleCall)cActionRefAssignment_1.eContents().get(0);
		private final Assignment cPrepositionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPrepositionPREPParserRuleCall_2_0 = (RuleCall)cPrepositionAssignment_2.eContents().get(0);
		private final Assignment cEntity2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntity2DeclarativeEntityOrPropertyRefParserRuleCall_3_0 = (RuleCall)cEntity2Assignment_3.eContents().get(0);
		
		//DeclarativeEntityAction:
		//    entity = DeclarativeEntityRef actionRef = ActionRef preposition = PREP entity2 = DeclarativeEntityOrPropertyRef
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entity = DeclarativeEntityRef actionRef = ActionRef preposition = PREP entity2 = DeclarativeEntityOrPropertyRef
		public Group getGroup() { return cGroup; }
		
		//entity = DeclarativeEntityRef
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }
		
		//DeclarativeEntityRef
		public RuleCall getEntityDeclarativeEntityRefParserRuleCall_0_0() { return cEntityDeclarativeEntityRefParserRuleCall_0_0; }
		
		//actionRef = ActionRef
		public Assignment getActionRefAssignment_1() { return cActionRefAssignment_1; }
		
		//ActionRef
		public RuleCall getActionRefActionRefParserRuleCall_1_0() { return cActionRefActionRefParserRuleCall_1_0; }
		
		//preposition = PREP
		public Assignment getPrepositionAssignment_2() { return cPrepositionAssignment_2; }
		
		//PREP
		public RuleCall getPrepositionPREPParserRuleCall_2_0() { return cPrepositionPREPParserRuleCall_2_0; }
		
		//entity2 = DeclarativeEntityOrPropertyRef
		public Assignment getEntity2Assignment_3() { return cEntity2Assignment_3; }
		
		//DeclarativeEntityOrPropertyRef
		public RuleCall getEntity2DeclarativeEntityOrPropertyRefParserRuleCall_3_0() { return cEntity2DeclarativeEntityOrPropertyRefParserRuleCall_3_0; }
	}
	public class DeclarativeEntityPropertyActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DeclarativeEntityPropertyAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntityDeclarativeEntityRefParserRuleCall_0_0 = (RuleCall)cEntityAssignment_0.eContents().get(0);
		private final Assignment cActionRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionRefActionRefParserRuleCall_1_0 = (RuleCall)cActionRefAssignment_1.eContents().get(0);
		private final Assignment cPrepositionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPrepositionPREPParserRuleCall_2_0 = (RuleCall)cPrepositionAssignment_2.eContents().get(0);
		private final Assignment cPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyPropertyRefParserRuleCall_3_0 = (RuleCall)cPropertyAssignment_3.eContents().get(0);
		private final Assignment cPreposition2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPreposition2PREPParserRuleCall_4_0 = (RuleCall)cPreposition2Assignment_4.eContents().get(0);
		private final Assignment cEntity2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEntity2DeclarativeEntityRefParserRuleCall_5_0 = (RuleCall)cEntity2Assignment_5.eContents().get(0);
		
		//DeclarativeEntityPropertyAction:
		//    entity = DeclarativeEntityRef actionRef = ActionRef preposition = PREP property = PropertyRef preposition2 = PREP entity2 = DeclarativeEntityRef
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entity = DeclarativeEntityRef actionRef = ActionRef preposition = PREP property = PropertyRef preposition2 = PREP entity2 = DeclarativeEntityRef
		public Group getGroup() { return cGroup; }
		
		//entity = DeclarativeEntityRef
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }
		
		//DeclarativeEntityRef
		public RuleCall getEntityDeclarativeEntityRefParserRuleCall_0_0() { return cEntityDeclarativeEntityRefParserRuleCall_0_0; }
		
		//actionRef = ActionRef
		public Assignment getActionRefAssignment_1() { return cActionRefAssignment_1; }
		
		//ActionRef
		public RuleCall getActionRefActionRefParserRuleCall_1_0() { return cActionRefActionRefParserRuleCall_1_0; }
		
		//preposition = PREP
		public Assignment getPrepositionAssignment_2() { return cPrepositionAssignment_2; }
		
		//PREP
		public RuleCall getPrepositionPREPParserRuleCall_2_0() { return cPrepositionPREPParserRuleCall_2_0; }
		
		//property = PropertyRef
		public Assignment getPropertyAssignment_3() { return cPropertyAssignment_3; }
		
		//PropertyRef
		public RuleCall getPropertyPropertyRefParserRuleCall_3_0() { return cPropertyPropertyRefParserRuleCall_3_0; }
		
		//preposition2 = PREP
		public Assignment getPreposition2Assignment_4() { return cPreposition2Assignment_4; }
		
		//PREP
		public RuleCall getPreposition2PREPParserRuleCall_4_0() { return cPreposition2PREPParserRuleCall_4_0; }
		
		//entity2 = DeclarativeEntityRef
		public Assignment getEntity2Assignment_5() { return cEntity2Assignment_5; }
		
		//DeclarativeEntityRef
		public RuleCall getEntity2DeclarativeEntityRefParserRuleCall_5_0() { return cEntity2DeclarativeEntityRefParserRuleCall_5_0; }
	}
	public class ImperativeVerbActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeVerbAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionImperativeActionRefParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Assignment cPrepositionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrepositionPREPParserRuleCall_1_0 = (RuleCall)cPrepositionAssignment_1.eContents().get(0);
		private final Assignment cEntityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntityImperativeEntityRefParserRuleCall_2_0 = (RuleCall)cEntityAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cPreposition2Assignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPreposition2PREPParserRuleCall_3_0_0 = (RuleCall)cPreposition2Assignment_3_0.eContents().get(0);
		private final Assignment cEntity2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEntity2ImperativeEntityRefParserRuleCall_3_1_0 = (RuleCall)cEntity2Assignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cPreposition3Assignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cPreposition3PREPParserRuleCall_4_0_0 = (RuleCall)cPreposition3Assignment_4_0.eContents().get(0);
		private final Assignment cEntity3Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEntity3ImperativeEntityRefParserRuleCall_4_1_0 = (RuleCall)cEntity3Assignment_4_1.eContents().get(0);
		
		//ImperativeVerbAction:
		//    action = ImperativeActionRef preposition = PREP (entity = ImperativeEntityRef)? (preposition2 = PREP entity2 = ImperativeEntityRef)? (preposition3 = PREP entity3 = ImperativeEntityRef)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//action = ImperativeActionRef preposition = PREP (entity = ImperativeEntityRef)? (preposition2 = PREP entity2 = ImperativeEntityRef)? (preposition3 = PREP entity3 = ImperativeEntityRef)?
		public Group getGroup() { return cGroup; }
		
		//action = ImperativeActionRef
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//ImperativeActionRef
		public RuleCall getActionImperativeActionRefParserRuleCall_0_0() { return cActionImperativeActionRefParserRuleCall_0_0; }
		
		//preposition = PREP
		public Assignment getPrepositionAssignment_1() { return cPrepositionAssignment_1; }
		
		//PREP
		public RuleCall getPrepositionPREPParserRuleCall_1_0() { return cPrepositionPREPParserRuleCall_1_0; }
		
		//(entity = ImperativeEntityRef)?
		public Assignment getEntityAssignment_2() { return cEntityAssignment_2; }
		
		//ImperativeEntityRef
		public RuleCall getEntityImperativeEntityRefParserRuleCall_2_0() { return cEntityImperativeEntityRefParserRuleCall_2_0; }
		
		//(preposition2 = PREP entity2 = ImperativeEntityRef)?
		public Group getGroup_3() { return cGroup_3; }
		
		//preposition2 = PREP
		public Assignment getPreposition2Assignment_3_0() { return cPreposition2Assignment_3_0; }
		
		//PREP
		public RuleCall getPreposition2PREPParserRuleCall_3_0_0() { return cPreposition2PREPParserRuleCall_3_0_0; }
		
		//entity2 = ImperativeEntityRef
		public Assignment getEntity2Assignment_3_1() { return cEntity2Assignment_3_1; }
		
		//ImperativeEntityRef
		public RuleCall getEntity2ImperativeEntityRefParserRuleCall_3_1_0() { return cEntity2ImperativeEntityRefParserRuleCall_3_1_0; }
		
		//(preposition3 = PREP entity3 = ImperativeEntityRef)?
		public Group getGroup_4() { return cGroup_4; }
		
		//preposition3 = PREP
		public Assignment getPreposition3Assignment_4_0() { return cPreposition3Assignment_4_0; }
		
		//PREP
		public RuleCall getPreposition3PREPParserRuleCall_4_0_0() { return cPreposition3PREPParserRuleCall_4_0_0; }
		
		//entity3 = ImperativeEntityRef
		public Assignment getEntity3Assignment_4_1() { return cEntity3Assignment_4_1; }
		
		//ImperativeEntityRef
		public RuleCall getEntity3ImperativeEntityRefParserRuleCall_4_1_0() { return cEntity3ImperativeEntityRefParserRuleCall_4_1_0; }
	}
	public class ImperativeEntityActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeEntityAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntityImperativeEntityRefParserRuleCall_0_0 = (RuleCall)cEntityAssignment_0.eContents().get(0);
		private final Assignment cActionRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionRefImperativeActionRefParserRuleCall_1_0 = (RuleCall)cActionRefAssignment_1.eContents().get(0);
		private final Assignment cPrepositionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPrepositionPREPParserRuleCall_2_0 = (RuleCall)cPrepositionAssignment_2.eContents().get(0);
		private final Assignment cEntity2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntity2ImperativeEntityRefParserRuleCall_3_0 = (RuleCall)cEntity2Assignment_3.eContents().get(0);
		
		//ImperativeEntityAction:
		//    entity = ImperativeEntityRef actionRef = ImperativeActionRef preposition = PREP entity2 = ImperativeEntityRef
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entity = ImperativeEntityRef actionRef = ImperativeActionRef preposition = PREP entity2 = ImperativeEntityRef
		public Group getGroup() { return cGroup; }
		
		//entity = ImperativeEntityRef
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }
		
		//ImperativeEntityRef
		public RuleCall getEntityImperativeEntityRefParserRuleCall_0_0() { return cEntityImperativeEntityRefParserRuleCall_0_0; }
		
		//actionRef = ImperativeActionRef
		public Assignment getActionRefAssignment_1() { return cActionRefAssignment_1; }
		
		//ImperativeActionRef
		public RuleCall getActionRefImperativeActionRefParserRuleCall_1_0() { return cActionRefImperativeActionRefParserRuleCall_1_0; }
		
		//preposition = PREP
		public Assignment getPrepositionAssignment_2() { return cPrepositionAssignment_2; }
		
		//PREP
		public RuleCall getPrepositionPREPParserRuleCall_2_0() { return cPrepositionPREPParserRuleCall_2_0; }
		
		//entity2 = ImperativeEntityRef
		public Assignment getEntity2Assignment_3() { return cEntity2Assignment_3; }
		
		//ImperativeEntityRef
		public RuleCall getEntity2ImperativeEntityRefParserRuleCall_3_0() { return cEntity2ImperativeEntityRefParserRuleCall_3_0; }
	}
	public class ImperativeEntityPropertyActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.ImperativeEntityPropertyAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntityImperativeEntityRefParserRuleCall_0_0 = (RuleCall)cEntityAssignment_0.eContents().get(0);
		private final Assignment cActionRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionRefImperativeActionRefParserRuleCall_1_0 = (RuleCall)cActionRefAssignment_1.eContents().get(0);
		private final Assignment cPrepositionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPrepositionPREPParserRuleCall_2_0 = (RuleCall)cPrepositionAssignment_2.eContents().get(0);
		private final Assignment cPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyImperativePropertyRefParserRuleCall_3_0 = (RuleCall)cPropertyAssignment_3.eContents().get(0);
		private final Assignment cPreposition2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPreposition2PREPParserRuleCall_4_0 = (RuleCall)cPreposition2Assignment_4.eContents().get(0);
		private final Assignment cEntity2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEntity2ImperativeEntityRefParserRuleCall_5_0 = (RuleCall)cEntity2Assignment_5.eContents().get(0);
		
		//ImperativeEntityPropertyAction:
		//    entity = ImperativeEntityRef actionRef = ImperativeActionRef preposition = PREP property = ImperativePropertyRef preposition2 = PREP entity2 = ImperativeEntityRef
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entity = ImperativeEntityRef actionRef = ImperativeActionRef preposition = PREP property = ImperativePropertyRef preposition2 = PREP entity2 = ImperativeEntityRef
		public Group getGroup() { return cGroup; }
		
		//entity = ImperativeEntityRef
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }
		
		//ImperativeEntityRef
		public RuleCall getEntityImperativeEntityRefParserRuleCall_0_0() { return cEntityImperativeEntityRefParserRuleCall_0_0; }
		
		//actionRef = ImperativeActionRef
		public Assignment getActionRefAssignment_1() { return cActionRefAssignment_1; }
		
		//ImperativeActionRef
		public RuleCall getActionRefImperativeActionRefParserRuleCall_1_0() { return cActionRefImperativeActionRefParserRuleCall_1_0; }
		
		//preposition = PREP
		public Assignment getPrepositionAssignment_2() { return cPrepositionAssignment_2; }
		
		//PREP
		public RuleCall getPrepositionPREPParserRuleCall_2_0() { return cPrepositionPREPParserRuleCall_2_0; }
		
		//property = ImperativePropertyRef
		public Assignment getPropertyAssignment_3() { return cPropertyAssignment_3; }
		
		//ImperativePropertyRef
		public RuleCall getPropertyImperativePropertyRefParserRuleCall_3_0() { return cPropertyImperativePropertyRefParserRuleCall_3_0; }
		
		//preposition2 = PREP
		public Assignment getPreposition2Assignment_4() { return cPreposition2Assignment_4; }
		
		//PREP
		public RuleCall getPreposition2PREPParserRuleCall_4_0() { return cPreposition2PREPParserRuleCall_4_0; }
		
		//entity2 = ImperativeEntityRef
		public Assignment getEntity2Assignment_5() { return cEntity2Assignment_5; }
		
		//ImperativeEntityRef
		public RuleCall getEntity2ImperativeEntityRefParserRuleCall_5_0() { return cEntity2ImperativeEntityRefParserRuleCall_5_0; }
	}
	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.bdd.xtext.BddDsl.DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DOUBLE returns ecore::EDouble : INT'.'INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT'.'INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	
	private final ModelElements pModel;
	private final ModelRefElements pModelRef;
	private final DeclarativeEntityDefElements pDeclarativeEntityDef;
	private final ImperativeEntityDefElements pImperativeEntityDef;
	private final ImperativeActionDefElements pImperativeActionDef;
	private final ActionDefElements pActionDef;
	private final PREPElements pPREP;
	private final StateDefElements pStateDef;
	private final StateNameElements pStateName;
	private final PropertyDefElements pPropertyDef;
	private final ImperativeStateDefElements pImperativeStateDef;
	private final ImperativeStateNameElements pImperativeStateName;
	private final ImperativePropertyDefElements pImperativePropertyDef;
	private final ScenarioElements pScenario;
	private final ImperativeScenarioElements pImperativeScenario;
	private final PrePostWordsElements pPrePostWords;
	private final ToBeWordsElements pToBeWords;
	private final DeclarativeScenarioStateElements pDeclarativeScenarioState;
	private final DeclarativeScenarioStateAndElements pDeclarativeScenarioStateAnd;
	private final ImperativeScenarioStateElements pImperativeScenarioState;
	private final ImperativeScenarioStateAndElements pImperativeScenarioStateAnd;
	private final DeclarativeScenarioActionElements pDeclarativeScenarioAction;
	private final DeclarativeScenarioActionAndElements pDeclarativeScenarioActionAnd;
	private final ImperativeScenarioActionElements pImperativeScenarioAction;
	private final ImperativeScenarioActionAndElements pImperativeScenarioActionAnd;
	private final ENTITY_IDENTITYElements pENTITY_IDENTITY;
	private final ADVERBElements pADVERB;
	private final DeclarativeEntityRefElements pDeclarativeEntityRef;
	private final ImperativeEntityRefElements pImperativeEntityRef;
	private final ActionRefElements pActionRef;
	private final ImperativeActionRefElements pImperativeActionRef;
	private final PropertyRefElements pPropertyRef;
	private final ImperativePropertyRefElements pImperativePropertyRef;
	private final DeclarativeEntityOrPropertyRefElements pDeclarativeEntityOrPropertyRef;
	private final DeclarativeEntityStatePhraseElements pDeclarativeEntityStatePhrase;
	private final DeclarativeEntityStatePhraseWithPropertyElements pDeclarativeEntityStatePhraseWithProperty;
	private final ImperativeEntityStatePhraseElements pImperativeEntityStatePhrase;
	private final ImperativeEntityStatePhraseWithPropertyElements pImperativeEntityStatePhraseWithProperty;
	private final DeclarativeEntityPropertyStatePhraseElements pDeclarativeEntityPropertyStatePhrase;
	private final ImperativeEntityPropertyStatePhraseElements pImperativeEntityPropertyStatePhrase;
	private final VerbActionElements pVerbAction;
	private final DeclarativeEntityActionElements pDeclarativeEntityAction;
	private final DeclarativeEntityPropertyActionElements pDeclarativeEntityPropertyAction;
	private final ImperativeVerbActionElements pImperativeVerbAction;
	private final ImperativeEntityActionElements pImperativeEntityAction;
	private final ImperativeEntityPropertyActionElements pImperativeEntityPropertyAction;
	private final DOUBLEElements pDOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BddDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pModelRef = new ModelRefElements();
		this.pDeclarativeEntityDef = new DeclarativeEntityDefElements();
		this.pImperativeEntityDef = new ImperativeEntityDefElements();
		this.pImperativeActionDef = new ImperativeActionDefElements();
		this.pActionDef = new ActionDefElements();
		this.pPREP = new PREPElements();
		this.pStateDef = new StateDefElements();
		this.pStateName = new StateNameElements();
		this.pPropertyDef = new PropertyDefElements();
		this.pImperativeStateDef = new ImperativeStateDefElements();
		this.pImperativeStateName = new ImperativeStateNameElements();
		this.pImperativePropertyDef = new ImperativePropertyDefElements();
		this.pScenario = new ScenarioElements();
		this.pImperativeScenario = new ImperativeScenarioElements();
		this.pPrePostWords = new PrePostWordsElements();
		this.pToBeWords = new ToBeWordsElements();
		this.pDeclarativeScenarioState = new DeclarativeScenarioStateElements();
		this.pDeclarativeScenarioStateAnd = new DeclarativeScenarioStateAndElements();
		this.pImperativeScenarioState = new ImperativeScenarioStateElements();
		this.pImperativeScenarioStateAnd = new ImperativeScenarioStateAndElements();
		this.pDeclarativeScenarioAction = new DeclarativeScenarioActionElements();
		this.pDeclarativeScenarioActionAnd = new DeclarativeScenarioActionAndElements();
		this.pImperativeScenarioAction = new ImperativeScenarioActionElements();
		this.pImperativeScenarioActionAnd = new ImperativeScenarioActionAndElements();
		this.pENTITY_IDENTITY = new ENTITY_IDENTITYElements();
		this.pADVERB = new ADVERBElements();
		this.pDeclarativeEntityRef = new DeclarativeEntityRefElements();
		this.pImperativeEntityRef = new ImperativeEntityRefElements();
		this.pActionRef = new ActionRefElements();
		this.pImperativeActionRef = new ImperativeActionRefElements();
		this.pPropertyRef = new PropertyRefElements();
		this.pImperativePropertyRef = new ImperativePropertyRefElements();
		this.pDeclarativeEntityOrPropertyRef = new DeclarativeEntityOrPropertyRefElements();
		this.pDeclarativeEntityStatePhrase = new DeclarativeEntityStatePhraseElements();
		this.pDeclarativeEntityStatePhraseWithProperty = new DeclarativeEntityStatePhraseWithPropertyElements();
		this.pImperativeEntityStatePhrase = new ImperativeEntityStatePhraseElements();
		this.pImperativeEntityStatePhraseWithProperty = new ImperativeEntityStatePhraseWithPropertyElements();
		this.pDeclarativeEntityPropertyStatePhrase = new DeclarativeEntityPropertyStatePhraseElements();
		this.pImperativeEntityPropertyStatePhrase = new ImperativeEntityPropertyStatePhraseElements();
		this.pVerbAction = new VerbActionElements();
		this.pDeclarativeEntityAction = new DeclarativeEntityActionElements();
		this.pDeclarativeEntityPropertyAction = new DeclarativeEntityPropertyActionElements();
		this.pImperativeVerbAction = new ImperativeVerbActionElements();
		this.pImperativeEntityAction = new ImperativeEntityActionElements();
		this.pImperativeEntityPropertyAction = new ImperativeEntityPropertyActionElements();
		this.pDOUBLE = new DOUBLEElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.bdd.xtext.BddDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    ('model' name = ID)
	//    (
	//        (modelRefs += ModelRef) |
	//        (declarativeEntityDef += DeclarativeEntityDef) |
	//        (imperativeEntityDef += ImperativeEntityDef) |
	//        (scenarios += Scenario)
	//    )*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ModelRef:
	//    'using' modelRef = [Model]
	//;
	public ModelRefElements getModelRefAccess() {
		return pModelRef;
	}
	
	public ParserRule getModelRefRule() {
		return getModelRefAccess().getRule();
	}
	
	//DeclarativeEntityDef:
	//    'declarative' 'entity' name = ID ('-'ID)? ('is' superEntities += [DeclarativeEntityDef] (',' superEntities += [DeclarativeEntityDef])*)? '{'
	//        ('actions:' (actions += ActionDef) ((',') actions += ActionDef)*)?
	//        ('states:' (states += StateDef) ((',') states += StateDef)*)?
	//        ('properties:' (properties += PropertyDef) ((',') properties += PropertyDef)*)?
	//    '}'
	//;
	public DeclarativeEntityDefElements getDeclarativeEntityDefAccess() {
		return pDeclarativeEntityDef;
	}
	
	public ParserRule getDeclarativeEntityDefRule() {
		return getDeclarativeEntityDefAccess().getRule();
	}
	
	//ImperativeEntityDef:
	//    'imperative' 'entity' name = ID ('-'ID)? ('is' superEntities += [ImperativeEntityDef] (',' superEntities += [ImperativeEntityDef])*)? '{'
	//        ('actions:' (actions += ImperativeActionDef)  ((',') actions += ImperativeActionDef)*)?
	//        ('states:' (states += ImperativeStateDef) ((',') states += ImperativeStateDef)*)?
	//        ('properties:' (properties += ImperativePropertyDef) ((',') properties += ImperativePropertyDef)*)?
	//    '}'
	//;
	public ImperativeEntityDefElements getImperativeEntityDefAccess() {
		return pImperativeEntityDef;
	}
	
	public ParserRule getImperativeEntityDefRule() {
		return getImperativeEntityDefAccess().getRule();
	}
	
	//ImperativeActionDef:
	//    name = ID ((('and'|'the') ID)? | ID)  ('[' (preposition = PREP) ']')?     ('the' argument = ID)?
	//;
	public ImperativeActionDefElements getImperativeActionDefAccess() {
		return pImperativeActionDef;
	}
	
	public ParserRule getImperativeActionDefRule() {
		return getImperativeActionDefAccess().getRule();
	}
	
	//ActionDef:
	//    name = ID (('and'|'the') ID)?  ('[' (preposition = PREP) ']')?     ('the' argument = ID)?
	//;
	public ActionDefElements getActionDefAccess() {
		return pActionDef;
	}
	
	public ParserRule getActionDefRule() {
		return getActionDefAccess().getRule();
	}
	
	//PREP: ('on' | 'of' | 'in' | 'from' |  'to' |  'into' |'for' | 'with' | 'out' | 'off' | 'up' | 'down')?
	//;
	public PREPElements getPREPAccess() {
		return pPREP;
	}
	
	public ParserRule getPREPRule() {
		return getPREPAccess().getRule();
	}
	
	//StateDef: postive = StateName ('/' negative = StateName)?;
	public StateDefElements getStateDefAccess() {
		return pStateDef;
	}
	
	public ParserRule getStateDefRule() {
		return getStateDefAccess().getRule();
	}
	
	//StateName: name = ID (('and'|'off') ID)?;
	public StateNameElements getStateNameAccess() {
		return pStateName;
	}
	
	public ParserRule getStateNameRule() {
		return getStateNameAccess().getRule();
	}
	
	//PropertyDef: name = ID (ID?);
	public PropertyDefElements getPropertyDefAccess() {
		return pPropertyDef;
	}
	
	public ParserRule getPropertyDefRule() {
		return getPropertyDefAccess().getRule();
	}
	
	//ImperativeStateDef: postive = ImperativeStateName ('/' negative = ImperativeStateName)?;
	public ImperativeStateDefElements getImperativeStateDefAccess() {
		return pImperativeStateDef;
	}
	
	public ParserRule getImperativeStateDefRule() {
		return getImperativeStateDefAccess().getRule();
	}
	
	//ImperativeStateName: name = ID (('and'|'off') ID)?;
	public ImperativeStateNameElements getImperativeStateNameAccess() {
		return pImperativeStateName;
	}
	
	public ParserRule getImperativeStateNameRule() {
		return getImperativeStateNameAccess().getRule();
	}
	
	//ImperativePropertyDef: name = ID (ID?);
	public ImperativePropertyDefElements getImperativePropertyDefAccess() {
		return pImperativePropertyDef;
	}
	
	public ParserRule getImperativePropertyDefRule() {
		return getImperativePropertyDefAccess().getRule();
	}
	
	//Scenario:
	//       'Scenario:' scenarioName = STRING
	//       'Given' preStateE = DeclarativeScenarioState
	//       imperative1 = ImperativeScenario?
	//       'When' actionE = DeclarativeScenarioAction
	//       imperative2 = ImperativeScenario?
	//       'Then' preStateE1 = DeclarativeScenarioState
	//       imperative3 = ImperativeScenario?
	//;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//ImperativeScenario:
	//   'which' 'means'
	//   'Given' preState = ImperativeScenarioState
	//   'When' action = ImperativeScenarioAction
	//   'Then' postState = ImperativeScenarioState
	//;
	public ImperativeScenarioElements getImperativeScenarioAccess() {
		return pImperativeScenario;
	}
	
	public ParserRule getImperativeScenarioRule() {
		return getImperativeScenarioAccess().getRule();
	}
	
	//PrePostWords:
	//    ('all')?
	//;
	public PrePostWordsElements getPrePostWordsAccess() {
		return pPrePostWords;
	}
	
	public ParserRule getPrePostWordsRule() {
		return getPrePostWordsAccess().getRule();
	}
	
	//ToBeWords:
	//    ('is'|'are'|'is' 'not'|'are' 'not')?
	//;
	public ToBeWordsElements getToBeWordsAccess() {
		return pToBeWords;
	}
	
	public ParserRule getToBeWordsRule() {
		return getToBeWordsAccess().getRule();
	}
	
	//DeclarativeScenarioState:
	//    PrePostWords states += (DeclarativeEntityPropertyStatePhrase | DeclarativeEntityStatePhrase | DeclarativeEntityStatePhraseWithProperty)
	//    ('And' andStates += DeclarativeScenarioStateAnd)*
	//;
	public DeclarativeScenarioStateElements getDeclarativeScenarioStateAccess() {
		return pDeclarativeScenarioState;
	}
	
	public ParserRule getDeclarativeScenarioStateRule() {
		return getDeclarativeScenarioStateAccess().getRule();
	}
	
	//DeclarativeScenarioStateAnd:
	//    PrePostWords states += (DeclarativeEntityPropertyStatePhrase | DeclarativeEntityStatePhrase | DeclarativeEntityStatePhraseWithProperty)
	//;
	public DeclarativeScenarioStateAndElements getDeclarativeScenarioStateAndAccess() {
		return pDeclarativeScenarioStateAnd;
	}
	
	public ParserRule getDeclarativeScenarioStateAndRule() {
		return getDeclarativeScenarioStateAndAccess().getRule();
	}
	
	//ImperativeScenarioState:
	//    PrePostWords states += (ImperativeEntityPropertyStatePhrase | ImperativeEntityStatePhrase | ImperativeEntityStatePhraseWithProperty)
	//    ('And' andStates += ImperativeScenarioStateAnd)*
	//;
	public ImperativeScenarioStateElements getImperativeScenarioStateAccess() {
		return pImperativeScenarioState;
	}
	
	public ParserRule getImperativeScenarioStateRule() {
		return getImperativeScenarioStateAccess().getRule();
	}
	
	//ImperativeScenarioStateAnd:
	//    PrePostWords states += (ImperativeEntityPropertyStatePhrase | ImperativeEntityStatePhrase | ImperativeEntityStatePhraseWithProperty)
	//;
	public ImperativeScenarioStateAndElements getImperativeScenarioStateAndAccess() {
		return pImperativeScenarioStateAnd;
	}
	
	public ParserRule getImperativeScenarioStateAndRule() {
		return getImperativeScenarioStateAndAccess().getRule();
	}
	
	//DeclarativeScenarioAction:
	//    actions += (DeclarativeEntityAction | VerbAction | DeclarativeEntityPropertyAction)
	//    ('And' andActions += DeclarativeScenarioActionAnd)*
	//;
	public DeclarativeScenarioActionElements getDeclarativeScenarioActionAccess() {
		return pDeclarativeScenarioAction;
	}
	
	public ParserRule getDeclarativeScenarioActionRule() {
		return getDeclarativeScenarioActionAccess().getRule();
	}
	
	//DeclarativeScenarioActionAnd:
	//    actions += (DeclarativeEntityAction | VerbAction | DeclarativeEntityPropertyAction)
	//;
	public DeclarativeScenarioActionAndElements getDeclarativeScenarioActionAndAccess() {
		return pDeclarativeScenarioActionAnd;
	}
	
	public ParserRule getDeclarativeScenarioActionAndRule() {
		return getDeclarativeScenarioActionAndAccess().getRule();
	}
	
	//ImperativeScenarioAction:
	//    actions += (ImperativeEntityAction | ImperativeVerbAction | ImperativeEntityPropertyAction)
	//    ('And' andActions += ImperativeScenarioActionAnd)*
	//;
	public ImperativeScenarioActionElements getImperativeScenarioActionAccess() {
		return pImperativeScenarioAction;
	}
	
	public ParserRule getImperativeScenarioActionRule() {
		return getImperativeScenarioActionAccess().getRule();
	}
	
	//ImperativeScenarioActionAnd:
	//    actions += (ImperativeEntityAction | ImperativeVerbAction | ImperativeEntityPropertyAction)
	//;
	public ImperativeScenarioActionAndElements getImperativeScenarioActionAndAccess() {
		return pImperativeScenarioActionAnd;
	}
	
	public ParserRule getImperativeScenarioActionAndRule() {
		return getImperativeScenarioActionAndAccess().getRule();
	}
	
	//ENTITY_IDENTITY: (('#' INT) | STRING);
	public ENTITY_IDENTITYElements getENTITY_IDENTITYAccess() {
		return pENTITY_IDENTITY;
	}
	
	public ParserRule getENTITY_IDENTITYRule() {
		return getENTITY_IDENTITYAccess().getRule();
	}
	
	//ADVERB: ('linearly');
	public ADVERBElements getADVERBAccess() {
		return pADVERB;
	}
	
	public ParserRule getADVERBRule() {
		return getADVERBAccess().getRule();
	}
	
	//DeclarativeEntityRef:
	//    'the' entity = [DeclarativeEntityDef] (entityValue = ENTITY_IDENTITY)?
	//;
	public DeclarativeEntityRefElements getDeclarativeEntityRefAccess() {
		return pDeclarativeEntityRef;
	}
	
	public ParserRule getDeclarativeEntityRefRule() {
		return getDeclarativeEntityRefAccess().getRule();
	}
	
	//ImperativeEntityRef:
	//    'the' entity = [ImperativeEntityDef] (entityValue = ENTITY_IDENTITY)?
	//;
	public ImperativeEntityRefElements getImperativeEntityRefAccess() {
		return pImperativeEntityRef;
	}
	
	public ParserRule getImperativeEntityRefRule() {
		return getImperativeEntityRefAccess().getRule();
	}
	
	//ActionRef:
	//    action = [ActionDef]
	//;
	public ActionRefElements getActionRefAccess() {
		return pActionRef;
	}
	
	public ParserRule getActionRefRule() {
		return getActionRefAccess().getRule();
	}
	
	//ImperativeActionRef:
	//    action = [ImperativeActionDef]
	//;
	public ImperativeActionRefElements getImperativeActionRefAccess() {
		return pImperativeActionRef;
	}
	
	public ParserRule getImperativeActionRefRule() {
		return getImperativeActionRefAccess().getRule();
	}
	
	//PropertyRef:
	//    'the' property = [PropertyDef] (propertyValue = ENTITY_IDENTITY)?
	//;
	public PropertyRefElements getPropertyRefAccess() {
		return pPropertyRef;
	}
	
	public ParserRule getPropertyRefRule() {
		return getPropertyRefAccess().getRule();
	}
	
	//ImperativePropertyRef:
	//    'the' property = [ImperativePropertyDef] (propertyValue = ENTITY_IDENTITY)?
	//;
	public ImperativePropertyRefElements getImperativePropertyRefAccess() {
		return pImperativePropertyRef;
	}
	
	public ParserRule getImperativePropertyRefRule() {
		return getImperativePropertyRefAccess().getRule();
	}
	
	//DeclarativeEntityOrPropertyRef:
	//    DeclarativeEntityRef | (property = [PropertyDef] (propertyValue = ENTITY_IDENTITY)?)
	//;
	public DeclarativeEntityOrPropertyRefElements getDeclarativeEntityOrPropertyRefAccess() {
		return pDeclarativeEntityOrPropertyRef;
	}
	
	public ParserRule getDeclarativeEntityOrPropertyRefRule() {
		return getDeclarativeEntityOrPropertyRefAccess().getRule();
	}
	
	//DeclarativeEntityStatePhrase:
	//    entity = DeclarativeEntityRef ToBeWords state = [StateName]
	//;
	public DeclarativeEntityStatePhraseElements getDeclarativeEntityStatePhraseAccess() {
		return pDeclarativeEntityStatePhrase;
	}
	
	public ParserRule getDeclarativeEntityStatePhraseRule() {
		return getDeclarativeEntityStatePhraseAccess().getRule();
	}
	
	//DeclarativeEntityStatePhraseWithProperty:
	//    entity = DeclarativeEntityRef ToBeWords state = [StateName] 'with' property = PropertyRef
	//;
	public DeclarativeEntityStatePhraseWithPropertyElements getDeclarativeEntityStatePhraseWithPropertyAccess() {
		return pDeclarativeEntityStatePhraseWithProperty;
	}
	
	public ParserRule getDeclarativeEntityStatePhraseWithPropertyRule() {
		return getDeclarativeEntityStatePhraseWithPropertyAccess().getRule();
	}
	
	//ImperativeEntityStatePhrase:
	//    entity = ImperativeEntityRef ToBeWords state = [ImperativeStateName]
	//;
	public ImperativeEntityStatePhraseElements getImperativeEntityStatePhraseAccess() {
		return pImperativeEntityStatePhrase;
	}
	
	public ParserRule getImperativeEntityStatePhraseRule() {
		return getImperativeEntityStatePhraseAccess().getRule();
	}
	
	//ImperativeEntityStatePhraseWithProperty:
	//    entity = ImperativeEntityRef ToBeWords state = [ImperativeStateName] 'with' property = ImperativePropertyRef
	//;
	public ImperativeEntityStatePhraseWithPropertyElements getImperativeEntityStatePhraseWithPropertyAccess() {
		return pImperativeEntityStatePhraseWithProperty;
	}
	
	public ParserRule getImperativeEntityStatePhraseWithPropertyRule() {
		return getImperativeEntityStatePhraseWithPropertyAccess().getRule();
	}
	
	//DeclarativeEntityPropertyStatePhrase:
	//    property = PropertyRef? preposition = PREP  entity = DeclarativeEntityRef
	//    toBeWord = ToBeWords value = ENTITY_IDENTITY
	//;
	public DeclarativeEntityPropertyStatePhraseElements getDeclarativeEntityPropertyStatePhraseAccess() {
		return pDeclarativeEntityPropertyStatePhrase;
	}
	
	public ParserRule getDeclarativeEntityPropertyStatePhraseRule() {
		return getDeclarativeEntityPropertyStatePhraseAccess().getRule();
	}
	
	//ImperativeEntityPropertyStatePhrase:
	//     property = ImperativePropertyRef? preposition = PREP  entity = ImperativeEntityRef
	//     toBeWord = ToBeWords value = ENTITY_IDENTITY
	//;
	public ImperativeEntityPropertyStatePhraseElements getImperativeEntityPropertyStatePhraseAccess() {
		return pImperativeEntityPropertyStatePhrase;
	}
	
	public ParserRule getImperativeEntityPropertyStatePhraseRule() {
		return getImperativeEntityPropertyStatePhraseAccess().getRule();
	}
	
	//VerbAction:
	//    action = ActionRef preposition = PREP (entity = DeclarativeEntityRef)? (preposition2 = PREP entity2 = DeclarativeEntityRef)? (preposition3 = PREP entity3 = DeclarativeEntityRef)?
	//;
	public VerbActionElements getVerbActionAccess() {
		return pVerbAction;
	}
	
	public ParserRule getVerbActionRule() {
		return getVerbActionAccess().getRule();
	}
	
	//DeclarativeEntityAction:
	//    entity = DeclarativeEntityRef actionRef = ActionRef preposition = PREP entity2 = DeclarativeEntityOrPropertyRef
	//;
	public DeclarativeEntityActionElements getDeclarativeEntityActionAccess() {
		return pDeclarativeEntityAction;
	}
	
	public ParserRule getDeclarativeEntityActionRule() {
		return getDeclarativeEntityActionAccess().getRule();
	}
	
	//DeclarativeEntityPropertyAction:
	//    entity = DeclarativeEntityRef actionRef = ActionRef preposition = PREP property = PropertyRef preposition2 = PREP entity2 = DeclarativeEntityRef
	//;
	public DeclarativeEntityPropertyActionElements getDeclarativeEntityPropertyActionAccess() {
		return pDeclarativeEntityPropertyAction;
	}
	
	public ParserRule getDeclarativeEntityPropertyActionRule() {
		return getDeclarativeEntityPropertyActionAccess().getRule();
	}
	
	//ImperativeVerbAction:
	//    action = ImperativeActionRef preposition = PREP (entity = ImperativeEntityRef)? (preposition2 = PREP entity2 = ImperativeEntityRef)? (preposition3 = PREP entity3 = ImperativeEntityRef)?
	//;
	public ImperativeVerbActionElements getImperativeVerbActionAccess() {
		return pImperativeVerbAction;
	}
	
	public ParserRule getImperativeVerbActionRule() {
		return getImperativeVerbActionAccess().getRule();
	}
	
	//ImperativeEntityAction:
	//    entity = ImperativeEntityRef actionRef = ImperativeActionRef preposition = PREP entity2 = ImperativeEntityRef
	//;
	public ImperativeEntityActionElements getImperativeEntityActionAccess() {
		return pImperativeEntityAction;
	}
	
	public ParserRule getImperativeEntityActionRule() {
		return getImperativeEntityActionAccess().getRule();
	}
	
	//ImperativeEntityPropertyAction:
	//    entity = ImperativeEntityRef actionRef = ImperativeActionRef preposition = PREP property = ImperativePropertyRef preposition2 = PREP entity2 = ImperativeEntityRef
	//;
	public ImperativeEntityPropertyActionElements getImperativeEntityPropertyActionAccess() {
		return pImperativeEntityPropertyAction;
	}
	
	public ParserRule getImperativeEntityPropertyActionRule() {
		return getImperativeEntityPropertyActionAccess().getRule();
	}
	
	//DOUBLE returns ecore::EDouble : INT'.'INT;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
